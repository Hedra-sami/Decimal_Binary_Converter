
Decimal_Binary_Converter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ce2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  00002ce2  00002d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002778  00000000  00000000  00002dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001012  00000000  00000000  00005544  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006556  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006696  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006806  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000844f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000933a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aca3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 81 13 	call	0x2702	; 0x2702 <main>
      7a:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab eb       	ldi	r26, 0xBB	; 187
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b eb       	ldi	r24, 0xBB	; 187
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_u8setPortDir>:
#include "../../lib/DIO_Registers.h"
#include "../../lib/bitmath.h"

/*PORT level*/
u8 DIO_u8setPortDir(u8 Copy_u8port , u8 Copy_u8dir)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_u8setPortDir+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_u8setPortDir+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
     b48:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	3d 83       	std	Y+5, r19	; 0x05
     b52:	2c 83       	std	Y+4, r18	; 0x04
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	91 05       	cpc	r25, r1
     b5c:	d1 f0       	breq	.+52     	; 0xb92 <DIO_u8setPortDir+0x5c>
     b5e:	2c 81       	ldd	r18, Y+4	; 0x04
     b60:	3d 81       	ldd	r19, Y+5	; 0x05
     b62:	22 30       	cpi	r18, 0x02	; 2
     b64:	31 05       	cpc	r19, r1
     b66:	2c f4       	brge	.+10     	; 0xb72 <DIO_u8setPortDir+0x3c>
     b68:	8c 81       	ldd	r24, Y+4	; 0x04
     b6a:	9d 81       	ldd	r25, Y+5	; 0x05
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	61 f0       	breq	.+24     	; 0xb88 <DIO_u8setPortDir+0x52>
     b70:	1f c0       	rjmp	.+62     	; 0xbb0 <DIO_u8setPortDir+0x7a>
     b72:	2c 81       	ldd	r18, Y+4	; 0x04
     b74:	3d 81       	ldd	r19, Y+5	; 0x05
     b76:	22 30       	cpi	r18, 0x02	; 2
     b78:	31 05       	cpc	r19, r1
     b7a:	81 f0       	breq	.+32     	; 0xb9c <DIO_u8setPortDir+0x66>
     b7c:	8c 81       	ldd	r24, Y+4	; 0x04
     b7e:	9d 81       	ldd	r25, Y+5	; 0x05
     b80:	83 30       	cpi	r24, 0x03	; 3
     b82:	91 05       	cpc	r25, r1
     b84:	81 f0       	breq	.+32     	; 0xba6 <DIO_u8setPortDir+0x70>
     b86:	14 c0       	rjmp	.+40     	; 0xbb0 <DIO_u8setPortDir+0x7a>
	{
	case PORT_A:
		DDRA_REG=Copy_u8dir;
     b88:	ea e3       	ldi	r30, 0x3A	; 58
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	80 83       	st	Z, r24
     b90:	11 c0       	rjmp	.+34     	; 0xbb4 <DIO_u8setPortDir+0x7e>
		break;
	case PORT_B:
		DDRB_REG=Copy_u8dir;
     b92:	e7 e3       	ldi	r30, 0x37	; 55
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	80 83       	st	Z, r24
     b9a:	0c c0       	rjmp	.+24     	; 0xbb4 <DIO_u8setPortDir+0x7e>
		break;
	case PORT_C:
		DDRC_REG=Copy_u8dir;
     b9c:	e4 e3       	ldi	r30, 0x34	; 52
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	80 83       	st	Z, r24
     ba4:	07 c0       	rjmp	.+14     	; 0xbb4 <DIO_u8setPortDir+0x7e>
		break;
	case PORT_D:
		DDRD_REG=Copy_u8dir;
     ba6:	e1 e3       	ldi	r30, 0x31	; 49
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	80 83       	st	Z, r24
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_u8setPortDir+0x7e>
		break;
	default:
		local_u8errStatus = RT_NOK ;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <DIO_u8setPortVal>:

u8 DIO_u8setPortVal(u8 Copy_u8port , u8 Copy_u8dval)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	00 d0       	rcall	.+0      	; 0xbcc <DIO_u8setPortVal+0x6>
     bcc:	00 d0       	rcall	.+0      	; 0xbce <DIO_u8setPortVal+0x8>
     bce:	0f 92       	push	r0
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	8a 83       	std	Y+2, r24	; 0x02
     bd6:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
     bd8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	3d 83       	std	Y+5, r19	; 0x05
     be2:	2c 83       	std	Y+4, r18	; 0x04
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	9d 81       	ldd	r25, Y+5	; 0x05
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	91 05       	cpc	r25, r1
     bec:	d1 f0       	breq	.+52     	; 0xc22 <DIO_u8setPortVal+0x5c>
     bee:	2c 81       	ldd	r18, Y+4	; 0x04
     bf0:	3d 81       	ldd	r19, Y+5	; 0x05
     bf2:	22 30       	cpi	r18, 0x02	; 2
     bf4:	31 05       	cpc	r19, r1
     bf6:	2c f4       	brge	.+10     	; 0xc02 <DIO_u8setPortVal+0x3c>
     bf8:	8c 81       	ldd	r24, Y+4	; 0x04
     bfa:	9d 81       	ldd	r25, Y+5	; 0x05
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	61 f0       	breq	.+24     	; 0xc18 <DIO_u8setPortVal+0x52>
     c00:	1f c0       	rjmp	.+62     	; 0xc40 <DIO_u8setPortVal+0x7a>
     c02:	2c 81       	ldd	r18, Y+4	; 0x04
     c04:	3d 81       	ldd	r19, Y+5	; 0x05
     c06:	22 30       	cpi	r18, 0x02	; 2
     c08:	31 05       	cpc	r19, r1
     c0a:	81 f0       	breq	.+32     	; 0xc2c <DIO_u8setPortVal+0x66>
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	91 05       	cpc	r25, r1
     c14:	81 f0       	breq	.+32     	; 0xc36 <DIO_u8setPortVal+0x70>
     c16:	14 c0       	rjmp	.+40     	; 0xc40 <DIO_u8setPortVal+0x7a>
	{
	case PORT_A:
		PORTA_REG=Copy_u8dval;
     c18:	eb e3       	ldi	r30, 0x3B	; 59
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	80 83       	st	Z, r24
     c20:	11 c0       	rjmp	.+34     	; 0xc44 <DIO_u8setPortVal+0x7e>
		break;
	case PORT_B:
		PORTB_REG=Copy_u8dval;
     c22:	e8 e3       	ldi	r30, 0x38	; 56
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	80 83       	st	Z, r24
     c2a:	0c c0       	rjmp	.+24     	; 0xc44 <DIO_u8setPortVal+0x7e>
		break;
	case PORT_C:
		PORTC_REG=Copy_u8dval;
     c2c:	e5 e3       	ldi	r30, 0x35	; 53
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	80 83       	st	Z, r24
     c34:	07 c0       	rjmp	.+14     	; 0xc44 <DIO_u8setPortVal+0x7e>
		break;
	case PORT_D:
		PORTD_REG=Copy_u8dval;
     c36:	e2 e3       	ldi	r30, 0x32	; 50
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	80 83       	st	Z, r24
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_u8setPortVal+0x7e>
		break;
	default:
		local_u8errStatus = RT_NOK ;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     c44:	89 81       	ldd	r24, Y+1	; 0x01
}
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <DIO_u8getPortVal>:

u8 DIO_u8getPortVal(u8 Copy_u8port , u8* Copy_u8pval)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <DIO_u8getPortVal+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <DIO_u8getPortVal+0x8>
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <DIO_u8getPortVal+0xa>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	8a 83       	std	Y+2, r24	; 0x02
     c66:	7c 83       	std	Y+4, r23	; 0x04
     c68:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
     c6a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	3e 83       	std	Y+6, r19	; 0x06
     c74:	2d 83       	std	Y+5, r18	; 0x05
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	91 05       	cpc	r25, r1
     c7e:	e1 f0       	breq	.+56     	; 0xcb8 <DIO_u8getPortVal+0x62>
     c80:	2d 81       	ldd	r18, Y+5	; 0x05
     c82:	3e 81       	ldd	r19, Y+6	; 0x06
     c84:	22 30       	cpi	r18, 0x02	; 2
     c86:	31 05       	cpc	r19, r1
     c88:	2c f4       	brge	.+10     	; 0xc94 <DIO_u8getPortVal+0x3e>
     c8a:	8d 81       	ldd	r24, Y+5	; 0x05
     c8c:	9e 81       	ldd	r25, Y+6	; 0x06
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	61 f0       	breq	.+24     	; 0xcaa <DIO_u8getPortVal+0x54>
     c92:	27 c0       	rjmp	.+78     	; 0xce2 <DIO_u8getPortVal+0x8c>
     c94:	2d 81       	ldd	r18, Y+5	; 0x05
     c96:	3e 81       	ldd	r19, Y+6	; 0x06
     c98:	22 30       	cpi	r18, 0x02	; 2
     c9a:	31 05       	cpc	r19, r1
     c9c:	a1 f0       	breq	.+40     	; 0xcc6 <DIO_u8getPortVal+0x70>
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ca0:	9e 81       	ldd	r25, Y+6	; 0x06
     ca2:	83 30       	cpi	r24, 0x03	; 3
     ca4:	91 05       	cpc	r25, r1
     ca6:	b1 f0       	breq	.+44     	; 0xcd4 <DIO_u8getPortVal+0x7e>
     ca8:	1c c0       	rjmp	.+56     	; 0xce2 <DIO_u8getPortVal+0x8c>
	{
	case PORT_A:
		*Copy_u8pval=PINA_REG;
     caa:	e9 e3       	ldi	r30, 0x39	; 57
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	eb 81       	ldd	r30, Y+3	; 0x03
     cb2:	fc 81       	ldd	r31, Y+4	; 0x04
     cb4:	80 83       	st	Z, r24
     cb6:	17 c0       	rjmp	.+46     	; 0xce6 <DIO_u8getPortVal+0x90>
		break;
	case PORT_B:
		*Copy_u8pval=PINB_REG;
     cb8:	e6 e3       	ldi	r30, 0x36	; 54
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	eb 81       	ldd	r30, Y+3	; 0x03
     cc0:	fc 81       	ldd	r31, Y+4	; 0x04
     cc2:	80 83       	st	Z, r24
     cc4:	10 c0       	rjmp	.+32     	; 0xce6 <DIO_u8getPortVal+0x90>
		break;
	case PORT_C:
		*Copy_u8pval=PINC_REG;
     cc6:	e3 e3       	ldi	r30, 0x33	; 51
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	eb 81       	ldd	r30, Y+3	; 0x03
     cce:	fc 81       	ldd	r31, Y+4	; 0x04
     cd0:	80 83       	st	Z, r24
     cd2:	09 c0       	rjmp	.+18     	; 0xce6 <DIO_u8getPortVal+0x90>
		break;
	case PORT_D:
		*Copy_u8pval=PIND_REG;
     cd4:	e0 e3       	ldi	r30, 0x30	; 48
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	eb 81       	ldd	r30, Y+3	; 0x03
     cdc:	fc 81       	ldd	r31, Y+4	; 0x04
     cde:	80 83       	st	Z, r24
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_u8getPortVal+0x90>
		break;
	default:
		local_u8errStatus = RT_NOK ;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce8:	26 96       	adiw	r28, 0x06	; 6
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <DIO_u8setPinDir>:
/*PIN level*/
u8 DIO_u8setPinDir(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8dir)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	28 97       	sbiw	r28, 0x08	; 8
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	8a 83       	std	Y+2, r24	; 0x02
     d10:	6b 83       	std	Y+3, r22	; 0x03
     d12:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
     d14:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= PIN_0 && Copy_u8pin <= PIN_7 )
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	88 30       	cpi	r24, 0x08	; 8
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <DIO_u8setPinDir+0x24>
     d1c:	f4 c0       	rjmp	.+488    	; 0xf06 <DIO_u8setPinDir+0x20c>
	{
		if(Copy_u8dir == INPUT)
     d1e:	8c 81       	ldd	r24, Y+4	; 0x04
     d20:	88 23       	and	r24, r24
     d22:	09 f0       	breq	.+2      	; 0xd26 <DIO_u8setPinDir+0x2c>
     d24:	77 c0       	rjmp	.+238    	; 0xe14 <DIO_u8setPinDir+0x11a>
		{
			switch(Copy_u8port)
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	38 87       	std	Y+8, r19	; 0x08
     d2e:	2f 83       	std	Y+7, r18	; 0x07
     d30:	8f 81       	ldd	r24, Y+7	; 0x07
     d32:	98 85       	ldd	r25, Y+8	; 0x08
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	91 05       	cpc	r25, r1
     d38:	59 f1       	breq	.+86     	; 0xd90 <DIO_u8setPinDir+0x96>
     d3a:	2f 81       	ldd	r18, Y+7	; 0x07
     d3c:	38 85       	ldd	r19, Y+8	; 0x08
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	2c f4       	brge	.+10     	; 0xd4e <DIO_u8setPinDir+0x54>
     d44:	8f 81       	ldd	r24, Y+7	; 0x07
     d46:	98 85       	ldd	r25, Y+8	; 0x08
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	69 f0       	breq	.+26     	; 0xd66 <DIO_u8setPinDir+0x6c>
     d4c:	60 c0       	rjmp	.+192    	; 0xe0e <DIO_u8setPinDir+0x114>
     d4e:	2f 81       	ldd	r18, Y+7	; 0x07
     d50:	38 85       	ldd	r19, Y+8	; 0x08
     d52:	22 30       	cpi	r18, 0x02	; 2
     d54:	31 05       	cpc	r19, r1
     d56:	89 f1       	breq	.+98     	; 0xdba <DIO_u8setPinDir+0xc0>
     d58:	8f 81       	ldd	r24, Y+7	; 0x07
     d5a:	98 85       	ldd	r25, Y+8	; 0x08
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_u8setPinDir+0x6a>
     d62:	40 c0       	rjmp	.+128    	; 0xde4 <DIO_u8setPinDir+0xea>
     d64:	54 c0       	rjmp	.+168    	; 0xe0e <DIO_u8setPinDir+0x114>
			{
			case PORT_A:
				CLR_BIT(DDRA_REG,Copy_u8pin);
     d66:	aa e3       	ldi	r26, 0x3A	; 58
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ea e3       	ldi	r30, 0x3A	; 58
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_u8setPinDir+0x8a>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_u8setPinDir+0x86>
     d88:	80 95       	com	r24
     d8a:	84 23       	and	r24, r20
     d8c:	8c 93       	st	X, r24
     d8e:	bd c0       	rjmp	.+378    	; 0xf0a <DIO_u8setPinDir+0x210>
				break;
			case PORT_B:
				CLR_BIT(DDRB_REG,Copy_u8pin);
     d90:	a7 e3       	ldi	r26, 0x37	; 55
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e7 e3       	ldi	r30, 0x37	; 55
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_u8setPinDir+0xb4>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_u8setPinDir+0xb0>
     db2:	80 95       	com	r24
     db4:	84 23       	and	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	a8 c0       	rjmp	.+336    	; 0xf0a <DIO_u8setPinDir+0x210>
				break;
			case PORT_C:
				CLR_BIT(DDRC_REG,Copy_u8pin);
     dba:	a4 e3       	ldi	r26, 0x34	; 52
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e4 e3       	ldi	r30, 0x34	; 52
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_u8setPinDir+0xde>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_u8setPinDir+0xda>
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	93 c0       	rjmp	.+294    	; 0xf0a <DIO_u8setPinDir+0x210>
				break;
			case PORT_D:
				CLR_BIT(DDRD_REG,Copy_u8pin);
     de4:	a1 e3       	ldi	r26, 0x31	; 49
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e1 e3       	ldi	r30, 0x31	; 49
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_u8setPinDir+0x108>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_u8setPinDir+0x104>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	7e c0       	rjmp	.+252    	; 0xf0a <DIO_u8setPinDir+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	7b c0       	rjmp	.+246    	; 0xf0a <DIO_u8setPinDir+0x210>
			}
		}
		else if(Copy_u8dir == OUTPUT)
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	09 f0       	breq	.+2      	; 0xe1c <DIO_u8setPinDir+0x122>
     e1a:	72 c0       	rjmp	.+228    	; 0xf00 <DIO_u8setPinDir+0x206>
		{
			switch(Copy_u8port)
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	3e 83       	std	Y+6, r19	; 0x06
     e24:	2d 83       	std	Y+5, r18	; 0x05
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	9e 81       	ldd	r25, Y+6	; 0x06
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	91 05       	cpc	r25, r1
     e2e:	49 f1       	breq	.+82     	; 0xe82 <DIO_u8setPinDir+0x188>
     e30:	2d 81       	ldd	r18, Y+5	; 0x05
     e32:	3e 81       	ldd	r19, Y+6	; 0x06
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	2c f4       	brge	.+10     	; 0xe44 <DIO_u8setPinDir+0x14a>
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	61 f0       	breq	.+24     	; 0xe5a <DIO_u8setPinDir+0x160>
     e42:	5b c0       	rjmp	.+182    	; 0xefa <DIO_u8setPinDir+0x200>
     e44:	2d 81       	ldd	r18, Y+5	; 0x05
     e46:	3e 81       	ldd	r19, Y+6	; 0x06
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	71 f1       	breq	.+92     	; 0xeaa <DIO_u8setPinDir+0x1b0>
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	83 30       	cpi	r24, 0x03	; 3
     e54:	91 05       	cpc	r25, r1
     e56:	e9 f1       	breq	.+122    	; 0xed2 <DIO_u8setPinDir+0x1d8>
     e58:	50 c0       	rjmp	.+160    	; 0xefa <DIO_u8setPinDir+0x200>
			{
			case PORT_A:
				SET_BIT(DDRA_REG,Copy_u8pin);
     e5a:	aa e3       	ldi	r26, 0x3A	; 58
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ea e3       	ldi	r30, 0x3A	; 58
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_u8setPinDir+0x17e>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_u8setPinDir+0x17a>
     e7c:	84 2b       	or	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	44 c0       	rjmp	.+136    	; 0xf0a <DIO_u8setPinDir+0x210>
				break;
			case PORT_B:
				SET_BIT(DDRB_REG,Copy_u8pin);
     e82:	a7 e3       	ldi	r26, 0x37	; 55
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e7 e3       	ldi	r30, 0x37	; 55
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_u8setPinDir+0x1a6>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_u8setPinDir+0x1a2>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	30 c0       	rjmp	.+96     	; 0xf0a <DIO_u8setPinDir+0x210>
				break;
			case PORT_C:
				SET_BIT(DDRC_REG,Copy_u8pin);
     eaa:	a4 e3       	ldi	r26, 0x34	; 52
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e4 e3       	ldi	r30, 0x34	; 52
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DIO_u8setPinDir+0x1ce>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DIO_u8setPinDir+0x1ca>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	1c c0       	rjmp	.+56     	; 0xf0a <DIO_u8setPinDir+0x210>
				break;
			case PORT_D:
				SET_BIT(DDRD_REG,Copy_u8pin);
     ed2:	a1 e3       	ldi	r26, 0x31	; 49
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e1 e3       	ldi	r30, 0x31	; 49
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_u8setPinDir+0x1f6>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_u8setPinDir+0x1f2>
     ef4:	84 2b       	or	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <DIO_u8setPinDir+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <DIO_u8setPinDir+0x210>
			}
		}
		else
		{
			local_u8errStatus = RT_NOK ;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_u8setPinDir+0x210>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f0c:	28 96       	adiw	r28, 0x08	; 8
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <DIO_u8setPinVal>:

u8 DIO_u8setPinVal(u8 Copy_u8port , u8 Copy_u8pin , u8 Copy_u8val)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	28 97       	sbiw	r28, 0x08	; 8
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	8a 83       	std	Y+2, r24	; 0x02
     f34:	6b 83       	std	Y+3, r22	; 0x03
     f36:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
     f38:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= PIN_0 && Copy_u8pin <= PIN_7 )
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 30       	cpi	r24, 0x08	; 8
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <DIO_u8setPinVal+0x24>
     f40:	f4 c0       	rjmp	.+488    	; 0x112a <DIO_u8setPinVal+0x20c>
	{
		if(Copy_u8val == LOW)
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	88 23       	and	r24, r24
     f46:	09 f0       	breq	.+2      	; 0xf4a <DIO_u8setPinVal+0x2c>
     f48:	77 c0       	rjmp	.+238    	; 0x1038 <DIO_u8setPinVal+0x11a>
		{
			switch(Copy_u8port)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	38 87       	std	Y+8, r19	; 0x08
     f52:	2f 83       	std	Y+7, r18	; 0x07
     f54:	8f 81       	ldd	r24, Y+7	; 0x07
     f56:	98 85       	ldd	r25, Y+8	; 0x08
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	91 05       	cpc	r25, r1
     f5c:	59 f1       	breq	.+86     	; 0xfb4 <DIO_u8setPinVal+0x96>
     f5e:	2f 81       	ldd	r18, Y+7	; 0x07
     f60:	38 85       	ldd	r19, Y+8	; 0x08
     f62:	22 30       	cpi	r18, 0x02	; 2
     f64:	31 05       	cpc	r19, r1
     f66:	2c f4       	brge	.+10     	; 0xf72 <DIO_u8setPinVal+0x54>
     f68:	8f 81       	ldd	r24, Y+7	; 0x07
     f6a:	98 85       	ldd	r25, Y+8	; 0x08
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	69 f0       	breq	.+26     	; 0xf8a <DIO_u8setPinVal+0x6c>
     f70:	60 c0       	rjmp	.+192    	; 0x1032 <DIO_u8setPinVal+0x114>
     f72:	2f 81       	ldd	r18, Y+7	; 0x07
     f74:	38 85       	ldd	r19, Y+8	; 0x08
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	89 f1       	breq	.+98     	; 0xfde <DIO_u8setPinVal+0xc0>
     f7c:	8f 81       	ldd	r24, Y+7	; 0x07
     f7e:	98 85       	ldd	r25, Y+8	; 0x08
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	91 05       	cpc	r25, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <DIO_u8setPinVal+0x6a>
     f86:	40 c0       	rjmp	.+128    	; 0x1008 <DIO_u8setPinVal+0xea>
     f88:	54 c0       	rjmp	.+168    	; 0x1032 <DIO_u8setPinVal+0x114>
			{
			case PORT_A:
				CLR_BIT(PORTA_REG,Copy_u8pin);
     f8a:	ab e3       	ldi	r26, 0x3B	; 59
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	eb e3       	ldi	r30, 0x3B	; 59
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_u8setPinVal+0x8a>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_u8setPinVal+0x86>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	bd c0       	rjmp	.+378    	; 0x112e <DIO_u8setPinVal+0x210>
				break;
			case PORT_B:
				CLR_BIT(PORTB_REG,Copy_u8pin);
     fb4:	a8 e3       	ldi	r26, 0x38	; 56
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e3       	ldi	r30, 0x38	; 56
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_u8setPinVal+0xb4>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_u8setPinVal+0xb0>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	a8 c0       	rjmp	.+336    	; 0x112e <DIO_u8setPinVal+0x210>
				break;
			case PORT_C:
				CLR_BIT(PORTC_REG,Copy_u8pin);
     fde:	a5 e3       	ldi	r26, 0x35	; 53
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 e3       	ldi	r30, 0x35	; 53
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_u8setPinVal+0xde>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_u8setPinVal+0xda>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	93 c0       	rjmp	.+294    	; 0x112e <DIO_u8setPinVal+0x210>
				break;
			case PORT_D:
				CLR_BIT(PORTD_REG,Copy_u8pin);
    1008:	a2 e3       	ldi	r26, 0x32	; 50
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e2 e3       	ldi	r30, 0x32	; 50
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_u8setPinVal+0x108>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_u8setPinVal+0x104>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	7e c0       	rjmp	.+252    	; 0x112e <DIO_u8setPinVal+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	7b c0       	rjmp	.+246    	; 0x112e <DIO_u8setPinVal+0x210>
			}
		}
		else if(Copy_u8val == HIGH)
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	09 f0       	breq	.+2      	; 0x1040 <DIO_u8setPinVal+0x122>
    103e:	72 c0       	rjmp	.+228    	; 0x1124 <DIO_u8setPinVal+0x206>
		{
			switch(Copy_u8port)
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3e 83       	std	Y+6, r19	; 0x06
    1048:	2d 83       	std	Y+5, r18	; 0x05
    104a:	8d 81       	ldd	r24, Y+5	; 0x05
    104c:	9e 81       	ldd	r25, Y+6	; 0x06
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	49 f1       	breq	.+82     	; 0x10a6 <DIO_u8setPinVal+0x188>
    1054:	2d 81       	ldd	r18, Y+5	; 0x05
    1056:	3e 81       	ldd	r19, Y+6	; 0x06
    1058:	22 30       	cpi	r18, 0x02	; 2
    105a:	31 05       	cpc	r19, r1
    105c:	2c f4       	brge	.+10     	; 0x1068 <DIO_u8setPinVal+0x14a>
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	61 f0       	breq	.+24     	; 0x107e <DIO_u8setPinVal+0x160>
    1066:	5b c0       	rjmp	.+182    	; 0x111e <DIO_u8setPinVal+0x200>
    1068:	2d 81       	ldd	r18, Y+5	; 0x05
    106a:	3e 81       	ldd	r19, Y+6	; 0x06
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	71 f1       	breq	.+92     	; 0x10ce <DIO_u8setPinVal+0x1b0>
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	e9 f1       	breq	.+122    	; 0x10f6 <DIO_u8setPinVal+0x1d8>
    107c:	50 c0       	rjmp	.+160    	; 0x111e <DIO_u8setPinVal+0x200>
			{
			case PORT_A:
				SET_BIT(PORTA_REG,Copy_u8pin);
    107e:	ab e3       	ldi	r26, 0x3B	; 59
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	eb e3       	ldi	r30, 0x3B	; 59
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_u8setPinVal+0x17e>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_u8setPinVal+0x17a>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	44 c0       	rjmp	.+136    	; 0x112e <DIO_u8setPinVal+0x210>
				break;
			case PORT_B:
				SET_BIT(PORTB_REG,Copy_u8pin);
    10a6:	a8 e3       	ldi	r26, 0x38	; 56
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e3       	ldi	r30, 0x38	; 56
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_u8setPinVal+0x1a6>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_u8setPinVal+0x1a2>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	30 c0       	rjmp	.+96     	; 0x112e <DIO_u8setPinVal+0x210>
				break;
			case PORT_C:
				SET_BIT(PORTC_REG,Copy_u8pin);
    10ce:	a5 e3       	ldi	r26, 0x35	; 53
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_u8setPinVal+0x1ce>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_u8setPinVal+0x1ca>
    10f0:	84 2b       	or	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	1c c0       	rjmp	.+56     	; 0x112e <DIO_u8setPinVal+0x210>
				break;
			case PORT_D:
				SET_BIT(PORTD_REG,Copy_u8pin);
    10f6:	a2 e3       	ldi	r26, 0x32	; 50
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e2 e3       	ldi	r30, 0x32	; 50
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_u8setPinVal+0x1f6>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_u8setPinVal+0x1f2>
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	08 c0       	rjmp	.+16     	; 0x112e <DIO_u8setPinVal+0x210>
				break;
			default:
				local_u8errStatus = RT_NOK ;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	05 c0       	rjmp	.+10     	; 0x112e <DIO_u8setPinVal+0x210>
			}
		}
		else
		{
			local_u8errStatus = RT_NOK ;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_u8setPinVal+0x210>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1130:	28 96       	adiw	r28, 0x08	; 8
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <DIO_u8getPinVal>:

u8 DIO_u8getPinVal(u8 Copy_u8port , u8 Copy_u8pin , u8* Copy_u8pval)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	27 97       	sbiw	r28, 0x07	; 7
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	6b 83       	std	Y+3, r22	; 0x03
    115a:	5d 83       	std	Y+5, r21	; 0x05
    115c:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8errStatus = RT_OK ;
    115e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin >= PIN_0 && Copy_u8pin <= PIN_7 )
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	88 30       	cpi	r24, 0x08	; 8
    1164:	08 f0       	brcs	.+2      	; 0x1168 <DIO_u8getPinVal+0x26>
    1166:	a5 c0       	rjmp	.+330    	; 0x12b2 <DIO_u8getPinVal+0x170>
	{
		switch(Copy_u8port)
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3f 83       	std	Y+7, r19	; 0x07
    1170:	2e 83       	std	Y+6, r18	; 0x06
    1172:	4e 81       	ldd	r20, Y+6	; 0x06
    1174:	5f 81       	ldd	r21, Y+7	; 0x07
    1176:	41 30       	cpi	r20, 0x01	; 1
    1178:	51 05       	cpc	r21, r1
    117a:	c1 f1       	breq	.+112    	; 0x11ec <DIO_u8getPinVal+0xaa>
    117c:	8e 81       	ldd	r24, Y+6	; 0x06
    117e:	9f 81       	ldd	r25, Y+7	; 0x07
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	91 05       	cpc	r25, r1
    1184:	34 f4       	brge	.+12     	; 0x1192 <DIO_u8getPinVal+0x50>
    1186:	2e 81       	ldd	r18, Y+6	; 0x06
    1188:	3f 81       	ldd	r19, Y+7	; 0x07
    118a:	21 15       	cp	r18, r1
    118c:	31 05       	cpc	r19, r1
    118e:	71 f0       	breq	.+28     	; 0x11ac <DIO_u8getPinVal+0x6a>
    1190:	8d c0       	rjmp	.+282    	; 0x12ac <DIO_u8getPinVal+0x16a>
    1192:	4e 81       	ldd	r20, Y+6	; 0x06
    1194:	5f 81       	ldd	r21, Y+7	; 0x07
    1196:	42 30       	cpi	r20, 0x02	; 2
    1198:	51 05       	cpc	r21, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <DIO_u8getPinVal+0x5c>
    119c:	47 c0       	rjmp	.+142    	; 0x122c <DIO_u8getPinVal+0xea>
    119e:	8e 81       	ldd	r24, Y+6	; 0x06
    11a0:	9f 81       	ldd	r25, Y+7	; 0x07
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <DIO_u8getPinVal+0x68>
    11a8:	61 c0       	rjmp	.+194    	; 0x126c <DIO_u8getPinVal+0x12a>
    11aa:	80 c0       	rjmp	.+256    	; 0x12ac <DIO_u8getPinVal+0x16a>
		{
		case PORT_A:
			*Copy_u8pval=GET_BIT(PINA_REG,Copy_u8pin);
    11ac:	e9 e3       	ldi	r30, 0x39	; 57
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_u8getPinVal+0x84>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	2a 95       	dec	r18
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_u8getPinVal+0x80>
    11ca:	9a 01       	movw	r18, r20
    11cc:	28 23       	and	r18, r24
    11ce:	39 23       	and	r19, r25
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	a9 01       	movw	r20, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_u8getPinVal+0x9c>
    11da:	55 95       	asr	r21
    11dc:	47 95       	ror	r20
    11de:	8a 95       	dec	r24
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_u8getPinVal+0x98>
    11e2:	ca 01       	movw	r24, r20
    11e4:	ec 81       	ldd	r30, Y+4	; 0x04
    11e6:	fd 81       	ldd	r31, Y+5	; 0x05
    11e8:	80 83       	st	Z, r24
    11ea:	65 c0       	rjmp	.+202    	; 0x12b6 <DIO_u8getPinVal+0x174>
			break;
		case PORT_B:
			*Copy_u8pval=GET_BIT(PINB_REG,Copy_u8pin);
    11ec:	e6 e3       	ldi	r30, 0x36	; 54
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_u8getPinVal+0xc4>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	2a 95       	dec	r18
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_u8getPinVal+0xc0>
    120a:	9a 01       	movw	r18, r20
    120c:	28 23       	and	r18, r24
    120e:	39 23       	and	r19, r25
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a9 01       	movw	r20, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_u8getPinVal+0xdc>
    121a:	55 95       	asr	r21
    121c:	47 95       	ror	r20
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_u8getPinVal+0xd8>
    1222:	ca 01       	movw	r24, r20
    1224:	ec 81       	ldd	r30, Y+4	; 0x04
    1226:	fd 81       	ldd	r31, Y+5	; 0x05
    1228:	80 83       	st	Z, r24
    122a:	45 c0       	rjmp	.+138    	; 0x12b6 <DIO_u8getPinVal+0x174>
			break;
		case PORT_C:
			*Copy_u8pval=GET_BIT(PINC_REG,Copy_u8pin);
    122c:	e3 e3       	ldi	r30, 0x33	; 51
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_u8getPinVal+0x104>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	2a 95       	dec	r18
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_u8getPinVal+0x100>
    124a:	9a 01       	movw	r18, r20
    124c:	28 23       	and	r18, r24
    124e:	39 23       	and	r19, r25
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a9 01       	movw	r20, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_u8getPinVal+0x11c>
    125a:	55 95       	asr	r21
    125c:	47 95       	ror	r20
    125e:	8a 95       	dec	r24
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_u8getPinVal+0x118>
    1262:	ca 01       	movw	r24, r20
    1264:	ec 81       	ldd	r30, Y+4	; 0x04
    1266:	fd 81       	ldd	r31, Y+5	; 0x05
    1268:	80 83       	st	Z, r24
    126a:	25 c0       	rjmp	.+74     	; 0x12b6 <DIO_u8getPinVal+0x174>
			break;
		case PORT_D:
			*Copy_u8pval=GET_BIT(PIND_REG,Copy_u8pin);
    126c:	e0 e3       	ldi	r30, 0x30	; 48
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_u8getPinVal+0x144>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	2a 95       	dec	r18
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_u8getPinVal+0x140>
    128a:	9a 01       	movw	r18, r20
    128c:	28 23       	and	r18, r24
    128e:	39 23       	and	r19, r25
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a9 01       	movw	r20, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_u8getPinVal+0x15c>
    129a:	55 95       	asr	r21
    129c:	47 95       	ror	r20
    129e:	8a 95       	dec	r24
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_u8getPinVal+0x158>
    12a2:	ca 01       	movw	r24, r20
    12a4:	ec 81       	ldd	r30, Y+4	; 0x04
    12a6:	fd 81       	ldd	r31, Y+5	; 0x05
    12a8:	80 83       	st	Z, r24
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <DIO_u8getPinVal+0x174>
			break;
		default:
			local_u8errStatus = RT_NOK ;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_u8getPinVal+0x174>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK ;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b8:	27 96       	adiw	r28, 0x07	; 7
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <LCD_vidfunctionSetEightBitMode>:

/*LCD functions*/

//Set up LCD on 8-bit mode
void LCD_vidfunctionSetEightBitMode()
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_FUNCTION_SET_EIGHT_BIT_MODE_CMD);
    12d2:	88 e3       	ldi	r24, 0x38	; 56
    12d4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <LCD_vidfunctionSetFourBitMode>:
//Set up LCD on 4-bit mode
void LCD_vidfunctionSetFourBitMode()
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_FUNCTION_SET_FOUR_BIT_MODE_CMD);
    12e6:	88 e2       	ldi	r24, 0x28	; 40
    12e8:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <LCD_viddisplayOnCursorOff>:
//Turn on display and turn off cursor
void LCD_viddisplayOnCursorOff()
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_DISPLAY_ON_CURSOR_OFF_CMD);
    12fa:	8c e0       	ldi	r24, 0x0C	; 12
    12fc:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <LCD_viddisplayOffCursorOff>:
//Turn off display and turn off cursor
void LCD_viddisplayOffCursorOff()
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_DISPLAY_OFF_CURSOR_OFF_CMD);
    130e:	88 e0       	ldi	r24, 0x08	; 8
    1310:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <LCD_viddisplayOnCursorOn>:
//Turn on display and turn on cursor
void LCD_viddisplayOnCursorOn()
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_DISPLAY_ON_CURSOR_ON_CMD);
    1322:	8e e0       	ldi	r24, 0x0E	; 14
    1324:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <LCD_viddisplayOffCursorOn>:
//Turn off display and turn on cursor
void LCD_viddisplayOffCursorOn()
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_DISPLAY_OFF_CURSOR_ON_CMD);
    1336:	8a e0       	ldi	r24, 0x0A	; 10
    1338:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <LCD_vidblinkCursor>:
//Blink the cursor
void LCD_vidblinkCursor()
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_BLINK_CURSOR_CMD);
    134a:	8f e0       	ldi	r24, 0x0F	; 15
    134c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <LCD_vidshiftLeftCursor>:
//Shift left the cursor
void LCD_vidshiftLeftCursor()
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_SHIFT_LEFT_CURSOR_CMD);
    135e:	80 e1       	ldi	r24, 0x10	; 16
    1360:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <LCD_vidshiftRightCursor>:
//Shift right the cursor
void LCD_vidshiftRightCursor()
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_SHIFT_RIGHT_CURSOR_CMD);
    1372:	84 e1       	ldi	r24, 0x14	; 20
    1374:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <LCD_vidshiftDisplayLeft>:
//Shift left the entire display
void LCD_vidshiftDisplayLeft()
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_SHIFT_LEFT_DISPLAY_CMD);
    1386:	88 e1       	ldi	r24, 0x18	; 24
    1388:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <LCD_vidshiftDisplayRight>:
//Shift right the entire display
void LCD_vidshiftDisplayRight()
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_SHIFT_RIGHT_DISPLAY_CMD);
    139a:	8c e1       	ldi	r24, 0x1C	; 28
    139c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <LCD_vidbeginAtFirstLine>:
//Force cursor to he beginning of the first line
void LCD_vidbeginAtFirstLine()
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_BEGIN_AT_FIRST_LINE_CMD);
    13ae:	80 e8       	ldi	r24, 0x80	; 128
    13b0:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <LCD_vidbeginAtSecondLine>:
//Force cursor to he beginning of the second line
void LCD_vidbeginAtSecondLine()
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_BEGIN_AT_SECOND_LINE_CMD);
    13c2:	80 ec       	ldi	r24, 0xC0	; 192
    13c4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <LCD_vidclearDisplay>:
//Clear the entire display
void LCD_vidclearDisplay()
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_DISPLAY_CLEAR_CMD);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <LCD_videntryModeSet>:
//Set up LCD on the entry mode
void LCD_videntryModeSet()
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	LCD_vidsendCommand(LCD_ENTRY_MODE_SET_CMD);
    13ea:	86 e0       	ldi	r24, 0x06	; 6
    13ec:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <LCD_vidsetCGRamAddress>:
//Forces the LCD controller to point CGRAM address
void LCD_vidsetCGRamAddress(u32 loc)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <LCD_vidsetCGRamAddress+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <LCD_vidsetCGRamAddress+0x8>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	69 83       	std	Y+1, r22	; 0x01
    1404:	7a 83       	std	Y+2, r23	; 0x02
    1406:	8b 83       	std	Y+3, r24	; 0x03
    1408:	9c 83       	std	Y+4, r25	; 0x04
	if(loc<8)
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	ab 81       	ldd	r26, Y+3	; 0x03
    1410:	bc 81       	ldd	r27, Y+4	; 0x04
    1412:	88 30       	cpi	r24, 0x08	; 8
    1414:	91 05       	cpc	r25, r1
    1416:	a1 05       	cpc	r26, r1
    1418:	b1 05       	cpc	r27, r1
    141a:	a8 f4       	brcc	.+42     	; 0x1446 <LCD_vidsetCGRamAddress+0x50>
	{
		LCD_vidsendCommand(64+(loc*8));
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	ab 81       	ldd	r26, Y+3	; 0x03
    1422:	bc 81       	ldd	r27, Y+4	; 0x04
    1424:	08 96       	adiw	r24, 0x08	; 8
    1426:	a1 1d       	adc	r26, r1
    1428:	b1 1d       	adc	r27, r1
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	aa 1f       	adc	r26, r26
    1430:	bb 1f       	adc	r27, r27
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	aa 1f       	adc	r26, r26
    1438:	bb 1f       	adc	r27, r27
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	aa 1f       	adc	r26, r26
    1440:	bb 1f       	adc	r27, r27
    1442:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <LCD_vidwriteString>:
//Write a string on the LCD display
void LCD_vidwriteString(u8*str)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <LCD_vidwriteString+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <LCD_vidwriteString+0x8>
    145c:	00 d0       	rcall	.+0      	; 0x145e <LCD_vidwriteString+0xa>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	9e 83       	std	Y+6, r25	; 0x06
    1464:	8d 83       	std	Y+5, r24	; 0x05
	u32 counter=0;
    1466:	19 82       	std	Y+1, r1	; 0x01
    1468:	1a 82       	std	Y+2, r1	; 0x02
    146a:	1b 82       	std	Y+3, r1	; 0x03
    146c:	1c 82       	std	Y+4, r1	; 0x04
    146e:	20 c0       	rjmp	.+64     	; 0x14b0 <LCD_vidwriteString+0x5c>
	/**Writing the string on the LCD display**/
	while(str[counter]!='\0')
	{
		LCD_vidwriteCharacter(str[counter]);
    1470:	29 81       	ldd	r18, Y+1	; 0x01
    1472:	3a 81       	ldd	r19, Y+2	; 0x02
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	fc 01       	movw	r30, r24
    147a:	e2 0f       	add	r30, r18
    147c:	f3 1f       	adc	r31, r19
    147e:	80 81       	ld	r24, Z
    1480:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_vidwriteCharacter>
		counter++;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	ab 81       	ldd	r26, Y+3	; 0x03
    148a:	bc 81       	ldd	r27, Y+4	; 0x04
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	a1 1d       	adc	r26, r1
    1490:	b1 1d       	adc	r27, r1
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	ab 83       	std	Y+3, r26	; 0x03
    1498:	bc 83       	std	Y+4, r27	; 0x04
		if(counter==16)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	ab 81       	ldd	r26, Y+3	; 0x03
    14a0:	bc 81       	ldd	r27, Y+4	; 0x04
    14a2:	80 31       	cpi	r24, 0x10	; 16
    14a4:	91 05       	cpc	r25, r1
    14a6:	a1 05       	cpc	r26, r1
    14a8:	b1 05       	cpc	r27, r1
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <LCD_vidwriteString+0x5c>
		{
			LCD_vidbeginAtSecondLine();
    14ac:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_vidbeginAtSecondLine>
//Write a string on the LCD display
void LCD_vidwriteString(u8*str)
{
	u32 counter=0;
	/**Writing the string on the LCD display**/
	while(str[counter]!='\0')
    14b0:	29 81       	ldd	r18, Y+1	; 0x01
    14b2:	3a 81       	ldd	r19, Y+2	; 0x02
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	fc 01       	movw	r30, r24
    14ba:	e2 0f       	add	r30, r18
    14bc:	f3 1f       	adc	r31, r19
    14be:	80 81       	ld	r24, Z
    14c0:	88 23       	and	r24, r24
    14c2:	b1 f6       	brne	.-84     	; 0x1470 <LCD_vidwriteString+0x1c>
		if(counter==16)
		{
			LCD_vidbeginAtSecondLine();
		}
	}
}
    14c4:	26 96       	adiw	r28, 0x06	; 6
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <LCD_vidwriteNumber>:
//Write an integer number on the LCD display
void LCD_vidwriteNumber(s32 num)
{
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	69 97       	sbiw	r28, 0x19	; 25
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	68 8b       	std	Y+16, r22	; 0x10
    14f4:	79 8b       	std	Y+17, r23	; 0x11
    14f6:	8a 8b       	std	Y+18, r24	; 0x12
    14f8:	9b 8b       	std	Y+19, r25	; 0x13
	/**Writing the number on the LCD display**/
	for(u32 digit_no=0 ; digit_no<counter ; digit_no++)
	{
		LCD_vidwriteCharacter(num_digits[digit_no]);
	}
}
    14fa:	2d b7       	in	r18, 0x3d	; 61
    14fc:	3e b7       	in	r19, 0x3e	; 62
    14fe:	39 8f       	std	Y+25, r19	; 0x19
    1500:	28 8f       	std	Y+24, r18	; 0x18
		}
	}
}
//Write an integer number on the LCD display
void LCD_vidwriteNumber(s32 num)
{
    1502:	8d b7       	in	r24, 0x3d	; 61
    1504:	9e b7       	in	r25, 0x3e	; 62
    1506:	9d 8b       	std	Y+21, r25	; 0x15
    1508:	8c 8b       	std	Y+20, r24	; 0x14
	s32 num_copy=num;
    150a:	88 89       	ldd	r24, Y+16	; 0x10
    150c:	99 89       	ldd	r25, Y+17	; 0x11
    150e:	aa 89       	ldd	r26, Y+18	; 0x12
    1510:	bb 89       	ldd	r27, Y+19	; 0x13
    1512:	8a 87       	std	Y+10, r24	; 0x0a
    1514:	9b 87       	std	Y+11, r25	; 0x0b
    1516:	ac 87       	std	Y+12, r26	; 0x0c
    1518:	bd 87       	std	Y+13, r27	; 0x0d
	u8 counter=0;
    151a:	19 86       	std	Y+9, r1	; 0x09
	if(num==0)
    151c:	88 89       	ldd	r24, Y+16	; 0x10
    151e:	99 89       	ldd	r25, Y+17	; 0x11
    1520:	aa 89       	ldd	r26, Y+18	; 0x12
    1522:	bb 89       	ldd	r27, Y+19	; 0x13
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	a1 05       	cpc	r26, r1
    1528:	b1 05       	cpc	r27, r1
    152a:	19 f4       	brne	.+6      	; 0x1532 <LCD_vidwriteNumber+0x5c>
	{
		LCD_vidwriteCharacter('0');
    152c:	80 e3       	ldi	r24, 0x30	; 48
    152e:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_vidwriteCharacter>
	}
	if(num<0)
    1532:	88 89       	ldd	r24, Y+16	; 0x10
    1534:	99 89       	ldd	r25, Y+17	; 0x11
    1536:	aa 89       	ldd	r26, Y+18	; 0x12
    1538:	bb 89       	ldd	r27, Y+19	; 0x13
    153a:	bb 23       	and	r27, r27
    153c:	bc f5       	brge	.+110    	; 0x15ac <LCD_vidwriteNumber+0xd6>
	{
		LCD_vidwriteCharacter('-');
    153e:	8d e2       	ldi	r24, 0x2D	; 45
    1540:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_vidwriteCharacter>
		num_copy *=-1;
    1544:	8a 85       	ldd	r24, Y+10	; 0x0a
    1546:	9b 85       	ldd	r25, Y+11	; 0x0b
    1548:	ac 85       	ldd	r26, Y+12	; 0x0c
    154a:	bd 85       	ldd	r27, Y+13	; 0x0d
    154c:	b0 95       	com	r27
    154e:	a0 95       	com	r26
    1550:	90 95       	com	r25
    1552:	81 95       	neg	r24
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	af 4f       	sbci	r26, 0xFF	; 255
    1558:	bf 4f       	sbci	r27, 0xFF	; 255
    155a:	8a 87       	std	Y+10, r24	; 0x0a
    155c:	9b 87       	std	Y+11, r25	; 0x0b
    155e:	ac 87       	std	Y+12, r26	; 0x0c
    1560:	bd 87       	std	Y+13, r27	; 0x0d
		num*=-1;
    1562:	88 89       	ldd	r24, Y+16	; 0x10
    1564:	99 89       	ldd	r25, Y+17	; 0x11
    1566:	aa 89       	ldd	r26, Y+18	; 0x12
    1568:	bb 89       	ldd	r27, Y+19	; 0x13
    156a:	b0 95       	com	r27
    156c:	a0 95       	com	r26
    156e:	90 95       	com	r25
    1570:	81 95       	neg	r24
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	af 4f       	sbci	r26, 0xFF	; 255
    1576:	bf 4f       	sbci	r27, 0xFF	; 255
    1578:	88 8b       	std	Y+16, r24	; 0x10
    157a:	99 8b       	std	Y+17, r25	; 0x11
    157c:	aa 8b       	std	Y+18, r26	; 0x12
    157e:	bb 8b       	std	Y+19, r27	; 0x13
    1580:	15 c0       	rjmp	.+42     	; 0x15ac <LCD_vidwriteNumber+0xd6>
	}
	/**Counting number of digits for the integer**/
	while(num_copy!=0)
	{
		num_copy=num_copy/10;
    1582:	8a 85       	ldd	r24, Y+10	; 0x0a
    1584:	9b 85       	ldd	r25, Y+11	; 0x0b
    1586:	ac 85       	ldd	r26, Y+12	; 0x0c
    1588:	bd 85       	ldd	r27, Y+13	; 0x0d
    158a:	2a e0       	ldi	r18, 0x0A	; 10
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__divmodsi4>
    159a:	da 01       	movw	r26, r20
    159c:	c9 01       	movw	r24, r18
    159e:	8a 87       	std	Y+10, r24	; 0x0a
    15a0:	9b 87       	std	Y+11, r25	; 0x0b
    15a2:	ac 87       	std	Y+12, r26	; 0x0c
    15a4:	bd 87       	std	Y+13, r27	; 0x0d
		counter++;
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	8f 5f       	subi	r24, 0xFF	; 255
    15aa:	89 87       	std	Y+9, r24	; 0x09
		LCD_vidwriteCharacter('-');
		num_copy *=-1;
		num*=-1;
	}
	/**Counting number of digits for the integer**/
	while(num_copy!=0)
    15ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    15b0:	ac 85       	ldd	r26, Y+12	; 0x0c
    15b2:	bd 85       	ldd	r27, Y+13	; 0x0d
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	a1 05       	cpc	r26, r1
    15b8:	b1 05       	cpc	r27, r1
    15ba:	19 f7       	brne	.-58     	; 0x1582 <LCD_vidwriteNumber+0xac>
	{
		num_copy=num_copy/10;
		counter++;
	}
	/**Separating number digits then organizing them into a char array**/
	u8 num_digits[counter];
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	2d b7       	in	r18, 0x3d	; 61
    15c4:	3e b7       	in	r19, 0x3e	; 62
    15c6:	28 1b       	sub	r18, r24
    15c8:	39 0b       	sbc	r19, r25
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	3e bf       	out	0x3e, r19	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	2d bf       	out	0x3d, r18	; 61
    15d4:	8d b7       	in	r24, 0x3d	; 61
    15d6:	9e b7       	in	r25, 0x3e	; 62
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	9f 8b       	std	Y+23, r25	; 0x17
    15dc:	8e 8b       	std	Y+22, r24	; 0x16
    15de:	8e 89       	ldd	r24, Y+22	; 0x16
    15e0:	9f 89       	ldd	r25, Y+23	; 0x17
    15e2:	00 96       	adiw	r24, 0x00	; 0
    15e4:	9f 8b       	std	Y+23, r25	; 0x17
    15e6:	8e 8b       	std	Y+22, r24	; 0x16
    15e8:	2e 89       	ldd	r18, Y+22	; 0x16
    15ea:	3f 89       	ldd	r19, Y+23	; 0x17
    15ec:	3f 87       	std	Y+15, r19	; 0x0f
    15ee:	2e 87       	std	Y+14, r18	; 0x0e
	for(s32 digit_no=counter-1 ; digit_no>=0 ; digit_no--)
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	aa 27       	eor	r26, r26
    15fa:	97 fd       	sbrc	r25, 7
    15fc:	a0 95       	com	r26
    15fe:	ba 2f       	mov	r27, r26
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	af 83       	std	Y+7, r26	; 0x07
    1606:	b8 87       	std	Y+8, r27	; 0x08
    1608:	37 c0       	rjmp	.+110    	; 0x1678 <LCD_vidwriteNumber+0x1a2>
	{
		num_digits[digit_no]=(num%10)+'0';
    160a:	ed 80       	ldd	r14, Y+5	; 0x05
    160c:	fe 80       	ldd	r15, Y+6	; 0x06
    160e:	0f 81       	ldd	r16, Y+7	; 0x07
    1610:	18 85       	ldd	r17, Y+8	; 0x08
    1612:	88 89       	ldd	r24, Y+16	; 0x10
    1614:	99 89       	ldd	r25, Y+17	; 0x11
    1616:	aa 89       	ldd	r26, Y+18	; 0x12
    1618:	bb 89       	ldd	r27, Y+19	; 0x13
    161a:	2a e0       	ldi	r18, 0x0A	; 10
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__divmodsi4>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	28 2f       	mov	r18, r24
    1630:	20 5d       	subi	r18, 0xD0	; 208
    1632:	8e 85       	ldd	r24, Y+14	; 0x0e
    1634:	9f 85       	ldd	r25, Y+15	; 0x0f
    1636:	fc 01       	movw	r30, r24
    1638:	ee 0d       	add	r30, r14
    163a:	ff 1d       	adc	r31, r15
    163c:	20 83       	st	Z, r18
		num=num/10;
    163e:	88 89       	ldd	r24, Y+16	; 0x10
    1640:	99 89       	ldd	r25, Y+17	; 0x11
    1642:	aa 89       	ldd	r26, Y+18	; 0x12
    1644:	bb 89       	ldd	r27, Y+19	; 0x13
    1646:	2a e0       	ldi	r18, 0x0A	; 10
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__divmodsi4>
    1656:	da 01       	movw	r26, r20
    1658:	c9 01       	movw	r24, r18
    165a:	88 8b       	std	Y+16, r24	; 0x10
    165c:	99 8b       	std	Y+17, r25	; 0x11
    165e:	aa 8b       	std	Y+18, r26	; 0x12
    1660:	bb 8b       	std	Y+19, r27	; 0x13
		num_copy=num_copy/10;
		counter++;
	}
	/**Separating number digits then organizing them into a char array**/
	u8 num_digits[counter];
	for(s32 digit_no=counter-1 ; digit_no>=0 ; digit_no--)
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	af 81       	ldd	r26, Y+7	; 0x07
    1668:	b8 85       	ldd	r27, Y+8	; 0x08
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	a1 09       	sbc	r26, r1
    166e:	b1 09       	sbc	r27, r1
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	af 83       	std	Y+7, r26	; 0x07
    1676:	b8 87       	std	Y+8, r27	; 0x08
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	af 81       	ldd	r26, Y+7	; 0x07
    167e:	b8 85       	ldd	r27, Y+8	; 0x08
    1680:	bb 23       	and	r27, r27
    1682:	1c f6       	brge	.-122    	; 0x160a <LCD_vidwriteNumber+0x134>
	{
		num_digits[digit_no]=(num%10)+'0';
		num=num/10;
	}
	/**Writing the number on the LCD display**/
	for(u32 digit_no=0 ; digit_no<counter ; digit_no++)
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	1a 82       	std	Y+2, r1	; 0x02
    1688:	1b 82       	std	Y+3, r1	; 0x03
    168a:	1c 82       	std	Y+4, r1	; 0x04
    168c:	17 c0       	rjmp	.+46     	; 0x16bc <LCD_vidwriteNumber+0x1e6>
	{
		LCD_vidwriteCharacter(num_digits[digit_no]);
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	ab 81       	ldd	r26, Y+3	; 0x03
    1694:	bc 81       	ldd	r27, Y+4	; 0x04
    1696:	2e 85       	ldd	r18, Y+14	; 0x0e
    1698:	3f 85       	ldd	r19, Y+15	; 0x0f
    169a:	f9 01       	movw	r30, r18
    169c:	e8 0f       	add	r30, r24
    169e:	f9 1f       	adc	r31, r25
    16a0:	80 81       	ld	r24, Z
    16a2:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_vidwriteCharacter>
	{
		num_digits[digit_no]=(num%10)+'0';
		num=num/10;
	}
	/**Writing the number on the LCD display**/
	for(u32 digit_no=0 ; digit_no<counter ; digit_no++)
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	ab 81       	ldd	r26, Y+3	; 0x03
    16ac:	bc 81       	ldd	r27, Y+4	; 0x04
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	a1 1d       	adc	r26, r1
    16b2:	b1 1d       	adc	r27, r1
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	ab 83       	std	Y+3, r26	; 0x03
    16ba:	bc 83       	std	Y+4, r27	; 0x04
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	ab 81       	ldd	r26, Y+3	; 0x03
    16cc:	bc 81       	ldd	r27, Y+4	; 0x04
    16ce:	82 17       	cp	r24, r18
    16d0:	93 07       	cpc	r25, r19
    16d2:	a4 07       	cpc	r26, r20
    16d4:	b5 07       	cpc	r27, r21
    16d6:	d8 f2       	brcs	.-74     	; 0x168e <LCD_vidwriteNumber+0x1b8>
    16d8:	8c 89       	ldd	r24, Y+20	; 0x14
    16da:	9d 89       	ldd	r25, Y+21	; 0x15
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	9e bf       	out	0x3e, r25	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	8d bf       	out	0x3d, r24	; 61
	{
		LCD_vidwriteCharacter(num_digits[digit_no]);
	}
}
    16e6:	28 8d       	ldd	r18, Y+24	; 0x18
    16e8:	39 8d       	ldd	r19, Y+25	; 0x19
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	3e bf       	out	0x3e, r19	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	2d bf       	out	0x3d, r18	; 61
    16f4:	69 96       	adiw	r28, 0x19	; 25
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	08 95       	ret

0000170e <LCD_viddecimalToBinary>:
//Converts decimal to binary and displays the equivalent binary value on LCD
void LCD_viddecimalToBinary(u32 num)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	ef 97       	sbiw	r28, 0x3f	; 63
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	6e ab       	std	Y+54, r22	; 0x36
    1724:	7f ab       	std	Y+55, r23	; 0x37
    1726:	88 af       	std	Y+56, r24	; 0x38
    1728:	99 af       	std	Y+57, r25	; 0x39
		for(u32 digit_no=0 ; digit_no<length ; digit_no++)
		{
			LCD_vidwriteCharacter(num_digits[digit_no]);
		}
	}
}
    172a:	2d b7       	in	r18, 0x3d	; 61
    172c:	3e b7       	in	r19, 0x3e	; 62
    172e:	3f af       	std	Y+63, r19	; 0x3f
    1730:	2e af       	std	Y+62, r18	; 0x3e
	}
}
//Converts decimal to binary and displays the equivalent binary value on LCD
void LCD_viddecimalToBinary(u32 num)
{
	if(num>65535)
    1732:	8e a9       	ldd	r24, Y+54	; 0x36
    1734:	9f a9       	ldd	r25, Y+55	; 0x37
    1736:	a8 ad       	ldd	r26, Y+56	; 0x38
    1738:	b9 ad       	ldd	r27, Y+57	; 0x39
    173a:	80 30       	cpi	r24, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	93 07       	cpc	r25, r19
    1740:	31 e0       	ldi	r19, 0x01	; 1
    1742:	a3 07       	cpc	r26, r19
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	b3 07       	cpc	r27, r19
    1748:	08 f4       	brcc	.+2      	; 0x174c <LCD_viddecimalToBinary+0x3e>
    174a:	6f c1       	rjmp	.+734    	; 0x1a2a <LCD_viddecimalToBinary+0x31c>
	{
		LCD_vidclearDisplay();
    174c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_vidclearDisplay>
		LCD_u8goTo(0,4);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	64 e0       	ldi	r22, 0x04	; 4
    1754:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_u8goTo>
		LCD_vidwriteString("Sorry");
    1758:	80 e6       	ldi	r24, 0x60	; 96
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_vidwriteString>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	aa e7       	ldi	r26, 0x7A	; 122
    1766:	b4 e4       	ldi	r27, 0x44	; 68
    1768:	8f a3       	std	Y+39, r24	; 0x27
    176a:	98 a7       	std	Y+40, r25	; 0x28
    176c:	a9 a7       	std	Y+41, r26	; 0x29
    176e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	6f a1       	ldd	r22, Y+39	; 0x27
    1772:	78 a5       	ldd	r23, Y+40	; 0x28
    1774:	89 a5       	ldd	r24, Y+41	; 0x29
    1776:	9a a5       	ldd	r25, Y+42	; 0x2a
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a ef       	ldi	r20, 0xFA	; 250
    177e:	54 e4       	ldi	r21, 0x44	; 68
    1780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8b a3       	std	Y+35, r24	; 0x23
    178a:	9c a3       	std	Y+36, r25	; 0x24
    178c:	ad a3       	std	Y+37, r26	; 0x25
    178e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1790:	6b a1       	ldd	r22, Y+35	; 0x23
    1792:	7c a1       	ldd	r23, Y+36	; 0x24
    1794:	8d a1       	ldd	r24, Y+37	; 0x25
    1796:	9e a1       	ldd	r25, Y+38	; 0x26
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <LCD_viddecimalToBinary+0xa4>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9a a3       	std	Y+34, r25	; 0x22
    17ae:	89 a3       	std	Y+33, r24	; 0x21
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <LCD_viddecimalToBinary+0x122>
	else if (__tmp > 65535)
    17b2:	6b a1       	ldd	r22, Y+35	; 0x23
    17b4:	7c a1       	ldd	r23, Y+36	; 0x24
    17b6:	8d a1       	ldd	r24, Y+37	; 0x25
    17b8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	4c f5       	brge	.+82     	; 0x181c <LCD_viddecimalToBinary+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ca:	6f a1       	ldd	r22, Y+39	; 0x27
    17cc:	78 a5       	ldd	r23, Y+40	; 0x28
    17ce:	89 a5       	ldd	r24, Y+41	; 0x29
    17d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9a a3       	std	Y+34, r25	; 0x22
    17f0:	89 a3       	std	Y+33, r24	; 0x21
    17f2:	0f c0       	rjmp	.+30     	; 0x1812 <LCD_viddecimalToBinary+0x104>
    17f4:	88 ec       	ldi	r24, 0xC8	; 200
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	98 a3       	std	Y+32, r25	; 0x20
    17fa:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <LCD_viddecimalToBinary+0xf2>
    1804:	98 a3       	std	Y+32, r25	; 0x20
    1806:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	89 a1       	ldd	r24, Y+33	; 0x21
    180a:	9a a1       	ldd	r25, Y+34	; 0x22
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	9a a3       	std	Y+34, r25	; 0x22
    1810:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	89 a1       	ldd	r24, Y+33	; 0x21
    1814:	9a a1       	ldd	r25, Y+34	; 0x22
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	69 f7       	brne	.-38     	; 0x17f4 <LCD_viddecimalToBinary+0xe6>
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <LCD_viddecimalToBinary+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	6b a1       	ldd	r22, Y+35	; 0x23
    181e:	7c a1       	ldd	r23, Y+36	; 0x24
    1820:	8d a1       	ldd	r24, Y+37	; 0x25
    1822:	9e a1       	ldd	r25, Y+38	; 0x26
    1824:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9a a3       	std	Y+34, r25	; 0x22
    182e:	89 a3       	std	Y+33, r24	; 0x21
    1830:	89 a1       	ldd	r24, Y+33	; 0x21
    1832:	9a a1       	ldd	r25, Y+34	; 0x22
    1834:	9e 8f       	std	Y+30, r25	; 0x1e
    1836:	8d 8f       	std	Y+29, r24	; 0x1d
    1838:	8d 8d       	ldd	r24, Y+29	; 0x1d
    183a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_viddecimalToBinary+0x12e>
    1840:	9e 8f       	std	Y+30, r25	; 0x1e
    1842:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		LCD_vidclearDisplay();
    1844:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_vidclearDisplay>
		LCD_vidwriteString("Can't convert decimal numbers");
    1848:	86 e6       	ldi	r24, 0x66	; 102
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_vidwriteString>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	aa e7       	ldi	r26, 0x7A	; 122
    1856:	b4 e4       	ldi	r27, 0x44	; 68
    1858:	89 8f       	std	Y+25, r24	; 0x19
    185a:	9a 8f       	std	Y+26, r25	; 0x1a
    185c:	ab 8f       	std	Y+27, r26	; 0x1b
    185e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	69 8d       	ldd	r22, Y+25	; 0x19
    1862:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1864:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1866:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8d 8b       	std	Y+21, r24	; 0x15
    187a:	9e 8b       	std	Y+22, r25	; 0x16
    187c:	af 8b       	std	Y+23, r26	; 0x17
    187e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1880:	6d 89       	ldd	r22, Y+21	; 0x15
    1882:	7e 89       	ldd	r23, Y+22	; 0x16
    1884:	8f 89       	ldd	r24, Y+23	; 0x17
    1886:	98 8d       	ldd	r25, Y+24	; 0x18
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <LCD_viddecimalToBinary+0x194>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9c 8b       	std	Y+20, r25	; 0x14
    189e:	8b 8b       	std	Y+19, r24	; 0x13
    18a0:	3f c0       	rjmp	.+126    	; 0x1920 <LCD_viddecimalToBinary+0x212>
	else if (__tmp > 65535)
    18a2:	6d 89       	ldd	r22, Y+21	; 0x15
    18a4:	7e 89       	ldd	r23, Y+22	; 0x16
    18a6:	8f 89       	ldd	r24, Y+23	; 0x17
    18a8:	98 8d       	ldd	r25, Y+24	; 0x18
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	4c f5       	brge	.+82     	; 0x190c <LCD_viddecimalToBinary+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	69 8d       	ldd	r22, Y+25	; 0x19
    18bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9c 8b       	std	Y+20, r25	; 0x14
    18e0:	8b 8b       	std	Y+19, r24	; 0x13
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <LCD_viddecimalToBinary+0x1f4>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9a 8b       	std	Y+18, r25	; 0x12
    18ea:	89 8b       	std	Y+17, r24	; 0x11
    18ec:	89 89       	ldd	r24, Y+17	; 0x11
    18ee:	9a 89       	ldd	r25, Y+18	; 0x12
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_viddecimalToBinary+0x1e2>
    18f4:	9a 8b       	std	Y+18, r25	; 0x12
    18f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f8:	8b 89       	ldd	r24, Y+19	; 0x13
    18fa:	9c 89       	ldd	r25, Y+20	; 0x14
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	9c 8b       	std	Y+20, r25	; 0x14
    1900:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1902:	8b 89       	ldd	r24, Y+19	; 0x13
    1904:	9c 89       	ldd	r25, Y+20	; 0x14
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	69 f7       	brne	.-38     	; 0x18e4 <LCD_viddecimalToBinary+0x1d6>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <LCD_viddecimalToBinary+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	6d 89       	ldd	r22, Y+21	; 0x15
    190e:	7e 89       	ldd	r23, Y+22	; 0x16
    1910:	8f 89       	ldd	r24, Y+23	; 0x17
    1912:	98 8d       	ldd	r25, Y+24	; 0x18
    1914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9c 8b       	std	Y+20, r25	; 0x14
    191e:	8b 8b       	std	Y+19, r24	; 0x13
    1920:	8b 89       	ldd	r24, Y+19	; 0x13
    1922:	9c 89       	ldd	r25, Y+20	; 0x14
    1924:	98 8b       	std	Y+16, r25	; 0x10
    1926:	8f 87       	std	Y+15, r24	; 0x0f
    1928:	8f 85       	ldd	r24, Y+15	; 0x0f
    192a:	98 89       	ldd	r25, Y+16	; 0x10
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_viddecimalToBinary+0x21e>
    1930:	98 8b       	std	Y+16, r25	; 0x10
    1932:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_vidclearDisplay();
    1934:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_vidclearDisplay>
		LCD_vidwriteString("greater than 65535");
    1938:	84 e8       	ldi	r24, 0x84	; 132
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_vidwriteString>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	aa e7       	ldi	r26, 0x7A	; 122
    1946:	b4 e4       	ldi	r27, 0x44	; 68
    1948:	8b 87       	std	Y+11, r24	; 0x0b
    194a:	9c 87       	std	Y+12, r25	; 0x0c
    194c:	ad 87       	std	Y+13, r26	; 0x0d
    194e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	6b 85       	ldd	r22, Y+11	; 0x0b
    1952:	7c 85       	ldd	r23, Y+12	; 0x0c
    1954:	8d 85       	ldd	r24, Y+13	; 0x0d
    1956:	9e 85       	ldd	r25, Y+14	; 0x0e
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a ef       	ldi	r20, 0xFA	; 250
    195e:	54 e4       	ldi	r21, 0x44	; 68
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8f 83       	std	Y+7, r24	; 0x07
    196a:	98 87       	std	Y+8, r25	; 0x08
    196c:	a9 87       	std	Y+9, r26	; 0x09
    196e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1970:	6f 81       	ldd	r22, Y+7	; 0x07
    1972:	78 85       	ldd	r23, Y+8	; 0x08
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <LCD_viddecimalToBinary+0x284>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <LCD_viddecimalToBinary+0x302>
	else if (__tmp > 65535)
    1992:	6f 81       	ldd	r22, Y+7	; 0x07
    1994:	78 85       	ldd	r23, Y+8	; 0x08
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <LCD_viddecimalToBinary+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <LCD_viddecimalToBinary+0x2e4>
    19d4:	88 ec       	ldi	r24, 0xC8	; 200
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 83       	std	Y+4, r25	; 0x04
    19da:	8b 83       	std	Y+3, r24	; 0x03
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_viddecimalToBinary+0x2d2>
    19e4:	9c 83       	std	Y+4, r25	; 0x04
    19e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <LCD_viddecimalToBinary+0x2c6>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <LCD_viddecimalToBinary+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6f 81       	ldd	r22, Y+7	; 0x07
    19fe:	78 85       	ldd	r23, Y+8	; 0x08
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_viddecimalToBinary+0x30e>
    1a20:	9a 83       	std	Y+2, r25	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_vidclearDisplay();
    1a24:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_vidclearDisplay>
    1a28:	97 c0       	rjmp	.+302    	; 0x1b58 <LCD_viddecimalToBinary+0x44a>
    1a2a:	8d b7       	in	r24, 0x3d	; 61
    1a2c:	9e b7       	in	r25, 0x3e	; 62
    1a2e:	9b af       	std	Y+59, r25	; 0x3b
    1a30:	8a af       	std	Y+58, r24	; 0x3a
	}
	else
	{
		u8 length = 16 ;
    1a32:	80 e1       	ldi	r24, 0x10	; 16
    1a34:	8b ab       	std	Y+51, r24	; 0x33
		u8 num_digits[length];
    1a36:	8b a9       	ldd	r24, Y+51	; 0x33
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	2d b7       	in	r18, 0x3d	; 61
    1a3e:	3e b7       	in	r19, 0x3e	; 62
    1a40:	28 1b       	sub	r18, r24
    1a42:	39 0b       	sbc	r19, r25
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	3e bf       	out	0x3e, r19	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	2d bf       	out	0x3d, r18	; 61
    1a4e:	8d b7       	in	r24, 0x3d	; 61
    1a50:	9e b7       	in	r25, 0x3e	; 62
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	9d af       	std	Y+61, r25	; 0x3d
    1a56:	8c af       	std	Y+60, r24	; 0x3c
    1a58:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a5c:	00 96       	adiw	r24, 0x00	; 0
    1a5e:	9d af       	std	Y+61, r25	; 0x3d
    1a60:	8c af       	std	Y+60, r24	; 0x3c
    1a62:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a64:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a66:	3d ab       	std	Y+53, r19	; 0x35
    1a68:	2c ab       	std	Y+52, r18	; 0x34
		/**Converting the decimal to binary then organizing the binary digits into a char array**/
		for(u32 digit_no = 0 ; digit_no<length ; digit_no++)
    1a6a:	1f a6       	std	Y+47, r1	; 0x2f
    1a6c:	18 aa       	std	Y+48, r1	; 0x30
    1a6e:	19 aa       	std	Y+49, r1	; 0x31
    1a70:	1a aa       	std	Y+50, r1	; 0x32
    1a72:	32 c0       	rjmp	.+100    	; 0x1ad8 <LCD_viddecimalToBinary+0x3ca>
		{
			num_digits[length-1-digit_no]=(num%2)+'0';
    1a74:	8b a9       	ldd	r24, Y+51	; 0x33
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9c 01       	movw	r18, r24
    1a7e:	44 27       	eor	r20, r20
    1a80:	37 fd       	sbrc	r19, 7
    1a82:	40 95       	com	r20
    1a84:	54 2f       	mov	r21, r20
    1a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a88:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8a:	a9 a9       	ldd	r26, Y+49	; 0x31
    1a8c:	ba a9       	ldd	r27, Y+50	; 0x32
    1a8e:	28 1b       	sub	r18, r24
    1a90:	39 0b       	sbc	r19, r25
    1a92:	4a 0b       	sbc	r20, r26
    1a94:	5b 0b       	sbc	r21, r27
    1a96:	8e a9       	ldd	r24, Y+54	; 0x36
    1a98:	81 70       	andi	r24, 0x01	; 1
    1a9a:	68 2f       	mov	r22, r24
    1a9c:	60 5d       	subi	r22, 0xD0	; 208
    1a9e:	8c a9       	ldd	r24, Y+52	; 0x34
    1aa0:	9d a9       	ldd	r25, Y+53	; 0x35
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	e2 0f       	add	r30, r18
    1aa6:	f3 1f       	adc	r31, r19
    1aa8:	60 83       	st	Z, r22
			num/=2;
    1aaa:	8e a9       	ldd	r24, Y+54	; 0x36
    1aac:	9f a9       	ldd	r25, Y+55	; 0x37
    1aae:	a8 ad       	ldd	r26, Y+56	; 0x38
    1ab0:	b9 ad       	ldd	r27, Y+57	; 0x39
    1ab2:	b6 95       	lsr	r27
    1ab4:	a7 95       	ror	r26
    1ab6:	97 95       	ror	r25
    1ab8:	87 95       	ror	r24
    1aba:	8e ab       	std	Y+54, r24	; 0x36
    1abc:	9f ab       	std	Y+55, r25	; 0x37
    1abe:	a8 af       	std	Y+56, r26	; 0x38
    1ac0:	b9 af       	std	Y+57, r27	; 0x39
	else
	{
		u8 length = 16 ;
		u8 num_digits[length];
		/**Converting the decimal to binary then organizing the binary digits into a char array**/
		for(u32 digit_no = 0 ; digit_no<length ; digit_no++)
    1ac2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac6:	a9 a9       	ldd	r26, Y+49	; 0x31
    1ac8:	ba a9       	ldd	r27, Y+50	; 0x32
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	a1 1d       	adc	r26, r1
    1ace:	b1 1d       	adc	r27, r1
    1ad0:	8f a7       	std	Y+47, r24	; 0x2f
    1ad2:	98 ab       	std	Y+48, r25	; 0x30
    1ad4:	a9 ab       	std	Y+49, r26	; 0x31
    1ad6:	ba ab       	std	Y+50, r27	; 0x32
    1ad8:	8b a9       	ldd	r24, Y+51	; 0x33
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae6:	a9 a9       	ldd	r26, Y+49	; 0x31
    1ae8:	ba a9       	ldd	r27, Y+50	; 0x32
    1aea:	82 17       	cp	r24, r18
    1aec:	93 07       	cpc	r25, r19
    1aee:	a4 07       	cpc	r26, r20
    1af0:	b5 07       	cpc	r27, r21
    1af2:	08 f4       	brcc	.+2      	; 0x1af6 <LCD_viddecimalToBinary+0x3e8>
    1af4:	bf cf       	rjmp	.-130    	; 0x1a74 <LCD_viddecimalToBinary+0x366>
		{
			num_digits[length-1-digit_no]=(num%2)+'0';
			num/=2;
		}
		/**Writing the binary number on the LCD display**/
		for(u32 digit_no=0 ; digit_no<length ; digit_no++)
    1af6:	1b a6       	std	Y+43, r1	; 0x2b
    1af8:	1c a6       	std	Y+44, r1	; 0x2c
    1afa:	1d a6       	std	Y+45, r1	; 0x2d
    1afc:	1e a6       	std	Y+46, r1	; 0x2e
    1afe:	17 c0       	rjmp	.+46     	; 0x1b2e <LCD_viddecimalToBinary+0x420>
		{
			LCD_vidwriteCharacter(num_digits[digit_no]);
    1b00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b02:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b04:	ad a5       	ldd	r26, Y+45	; 0x2d
    1b06:	be a5       	ldd	r27, Y+46	; 0x2e
    1b08:	2c a9       	ldd	r18, Y+52	; 0x34
    1b0a:	3d a9       	ldd	r19, Y+53	; 0x35
    1b0c:	f9 01       	movw	r30, r18
    1b0e:	e8 0f       	add	r30, r24
    1b10:	f9 1f       	adc	r31, r25
    1b12:	80 81       	ld	r24, Z
    1b14:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_vidwriteCharacter>
		{
			num_digits[length-1-digit_no]=(num%2)+'0';
			num/=2;
		}
		/**Writing the binary number on the LCD display**/
		for(u32 digit_no=0 ; digit_no<length ; digit_no++)
    1b18:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b1c:	ad a5       	ldd	r26, Y+45	; 0x2d
    1b1e:	be a5       	ldd	r27, Y+46	; 0x2e
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	a1 1d       	adc	r26, r1
    1b24:	b1 1d       	adc	r27, r1
    1b26:	8b a7       	std	Y+43, r24	; 0x2b
    1b28:	9c a7       	std	Y+44, r25	; 0x2c
    1b2a:	ad a7       	std	Y+45, r26	; 0x2d
    1b2c:	be a7       	std	Y+46, r27	; 0x2e
    1b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b3c:	ad a5       	ldd	r26, Y+45	; 0x2d
    1b3e:	be a5       	ldd	r27, Y+46	; 0x2e
    1b40:	82 17       	cp	r24, r18
    1b42:	93 07       	cpc	r25, r19
    1b44:	a4 07       	cpc	r26, r20
    1b46:	b5 07       	cpc	r27, r21
    1b48:	d8 f2       	brcs	.-74     	; 0x1b00 <LCD_viddecimalToBinary+0x3f2>
    1b4a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b4c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	9e bf       	out	0x3e, r25	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	8d bf       	out	0x3d, r24	; 61
		{
			LCD_vidwriteCharacter(num_digits[digit_no]);
		}
	}
}
    1b58:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b5a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	3e bf       	out	0x3e, r19	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	2d bf       	out	0x3d, r18	; 61
    1b66:	ef 96       	adiw	r28, 0x3f	; 63
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <LCD_u8goTo>:
//Put the cursor at a specific location (segment) on the LCD display
u8 LCD_u8goTo(u8 row_no , u8 col_no)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <LCD_u8goTo+0x6>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <LCD_u8goTo+0x8>
    1b80:	0f 92       	push	r0
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	8a 83       	std	Y+2, r24	; 0x02
    1b88:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8errStatus = RT_OK ;
    1b8a:	19 82       	std	Y+1, r1	; 0x01
	if(col_no>=0 && col_no<=15)
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	80 31       	cpi	r24, 0x10	; 16
    1b90:	e0 f4       	brcc	.+56     	; 0x1bca <LCD_u8goTo+0x52>
	{
		switch(row_no)
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3d 83       	std	Y+5, r19	; 0x05
    1b9a:	2c 83       	std	Y+4, r18	; 0x04
    1b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	31 f0       	breq	.+12     	; 0x1bb0 <LCD_u8goTo+0x38>
    1ba4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba8:	21 30       	cpi	r18, 0x01	; 1
    1baa:	31 05       	cpc	r19, r1
    1bac:	31 f0       	breq	.+12     	; 0x1bba <LCD_u8goTo+0x42>
    1bae:	0a c0       	rjmp	.+20     	; 0x1bc4 <LCD_u8goTo+0x4c>
		{
		case 0:
			LCD_vidsendCommand(col_no+128);
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	80 58       	subi	r24, 0x80	; 128
    1bb4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
    1bb8:	0a c0       	rjmp	.+20     	; 0x1bce <LCD_u8goTo+0x56>
			break;
		case 1:
			LCD_vidsendCommand(col_no+192);
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	80 54       	subi	r24, 0x40	; 64
    1bbe:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_vidsendCommand>
    1bc2:	05 c0       	rjmp	.+10     	; 0x1bce <LCD_u8goTo+0x56>
			break;
		default:
			local_u8errStatus = RT_NOK;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <LCD_u8goTo+0x56>
		}
	}
	else
	{
		local_u8errStatus = RT_NOK;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8errStatus ;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <LCD_vidwriteArabicCharactersOnCGRam>:

void LCD_vidwriteArabicCharactersOnCGRam(u8*character,u32 loc)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	2a 97       	sbiw	r28, 0x0a	; 10
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	4f 83       	std	Y+7, r20	; 0x07
    1bfa:	58 87       	std	Y+8, r21	; 0x08
    1bfc:	69 87       	std	Y+9, r22	; 0x09
    1bfe:	7a 87       	std	Y+10, r23	; 0x0a
	LCD_vidsetCGRamAddress(loc);
    1c00:	8f 81       	ldd	r24, Y+7	; 0x07
    1c02:	98 85       	ldd	r25, Y+8	; 0x08
    1c04:	a9 85       	ldd	r26, Y+9	; 0x09
    1c06:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <LCD_vidsetCGRamAddress>
	for(u32 i = 0 ; i < 8 ; i++)
    1c10:	19 82       	std	Y+1, r1	; 0x01
    1c12:	1a 82       	std	Y+2, r1	; 0x02
    1c14:	1b 82       	std	Y+3, r1	; 0x03
    1c16:	1c 82       	std	Y+4, r1	; 0x04
    1c18:	15 c0       	rjmp	.+42     	; 0x1c44 <LCD_vidwriteArabicCharactersOnCGRam+0x64>
	{
		LCD_vidwriteCharacter(character[i]);
    1c1a:	29 81       	ldd	r18, Y+1	; 0x01
    1c1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	fc 01       	movw	r30, r24
    1c24:	e2 0f       	add	r30, r18
    1c26:	f3 1f       	adc	r31, r19
    1c28:	80 81       	ld	r24, Z
    1c2a:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_vidwriteCharacter>
}

void LCD_vidwriteArabicCharactersOnCGRam(u8*character,u32 loc)
{
	LCD_vidsetCGRamAddress(loc);
	for(u32 i = 0 ; i < 8 ; i++)
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	ab 81       	ldd	r26, Y+3	; 0x03
    1c34:	bc 81       	ldd	r27, Y+4	; 0x04
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	a1 1d       	adc	r26, r1
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	ab 83       	std	Y+3, r26	; 0x03
    1c42:	bc 83       	std	Y+4, r27	; 0x04
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	ab 81       	ldd	r26, Y+3	; 0x03
    1c4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1c4c:	88 30       	cpi	r24, 0x08	; 8
    1c4e:	91 05       	cpc	r25, r1
    1c50:	a1 05       	cpc	r26, r1
    1c52:	b1 05       	cpc	r27, r1
    1c54:	10 f3       	brcs	.-60     	; 0x1c1a <LCD_vidwriteArabicCharactersOnCGRam+0x3a>
	{
		LCD_vidwriteCharacter(character[i]);
	}
}
    1c56:	2a 96       	adiw	r28, 0x0a	; 10
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LCD_vidinit>:
#include "LCD_cfg.h"
#include "LCD_Functions.h"
#include "LCD_int.h"

void LCD_vidinit()
{
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	c6 54       	subi	r28, 0x46	; 70
    1c76:	d0 40       	sbci	r29, 0x00	; 0
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
	//Setting control and data ports directions as output ports
	DIO_u8setPortDir(LCD_DATA_PORT,FULL_OUTPUT);
    1c82:	82 e0       	ldi	r24, 0x02	; 2
    1c84:	6f ef       	ldi	r22, 0xFF	; 255
    1c86:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8setPortDir>
	DIO_u8setPortDir(LCD_CTRL_PINS_PORT,0x07);
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	67 e0       	ldi	r22, 0x07	; 7
    1c8e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8setPortDir>
    1c92:	fe 01       	movw	r30, r28
    1c94:	ed 5b       	subi	r30, 0xBD	; 189
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a0 e2       	ldi	r26, 0x20	; 32
    1c9e:	b2 e4       	ldi	r27, 0x42	; 66
    1ca0:	80 83       	st	Z, r24
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	a2 83       	std	Z+2, r26	; 0x02
    1ca6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca8:	8e 01       	movw	r16, r28
    1caa:	01 5c       	subi	r16, 0xC1	; 193
    1cac:	1f 4f       	sbci	r17, 0xFF	; 255
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ed 5b       	subi	r30, 0xBD	; 189
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	60 81       	ld	r22, Z
    1cb6:	71 81       	ldd	r23, Z+1	; 0x01
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	4a ef       	ldi	r20, 0xFA	; 250
    1cc2:	54 e4       	ldi	r21, 0x44	; 68
    1cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	f8 01       	movw	r30, r16
    1cce:	80 83       	st	Z, r24
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	a2 83       	std	Z+2, r26	; 0x02
    1cd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ff 96       	adiw	r30, 0x3f	; 63
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <LCD_vidinit+0x94>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9e af       	std	Y+62, r25	; 0x3e
    1cf8:	8d af       	std	Y+61, r24	; 0x3d
    1cfa:	46 c0       	rjmp	.+140    	; 0x1d88 <LCD_vidinit+0x120>
	else if (__tmp > 65535)
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ff 96       	adiw	r30, 0x3f	; 63
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	57 e4       	ldi	r21, 0x47	; 71
    1d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	64 f5       	brge	.+88     	; 0x1d70 <LCD_vidinit+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d18:	fe 01       	movw	r30, r28
    1d1a:	ed 5b       	subi	r30, 0xBD	; 189
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9e af       	std	Y+62, r25	; 0x3e
    1d44:	8d af       	std	Y+61, r24	; 0x3d
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <LCD_vidinit+0xfe>
    1d48:	88 ec       	ldi	r24, 0xC8	; 200
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c af       	std	Y+60, r25	; 0x3c
    1d4e:	8b af       	std	Y+59, r24	; 0x3b
    1d50:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d52:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_vidinit+0xec>
    1d58:	9c af       	std	Y+60, r25	; 0x3c
    1d5a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	9e af       	std	Y+62, r25	; 0x3e
    1d64:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d68:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <LCD_vidinit+0xe0>
    1d6e:	16 c0       	rjmp	.+44     	; 0x1d9c <LCD_vidinit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	fe 01       	movw	r30, r28
    1d72:	ff 96       	adiw	r30, 0x3f	; 63
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	9e af       	std	Y+62, r25	; 0x3e
    1d86:	8d af       	std	Y+61, r24	; 0x3d
    1d88:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d8c:	9a af       	std	Y+58, r25	; 0x3a
    1d8e:	89 af       	std	Y+57, r24	; 0x39
    1d90:	89 ad       	ldd	r24, Y+57	; 0x39
    1d92:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <LCD_vidinit+0x12c>
    1d98:	9a af       	std	Y+58, r25	; 0x3a
    1d9a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	//Set up LCD on the 8-bit mode
	LCD_vidfunctionSetEightBitMode();
    1d9c:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_vidfunctionSetEightBitMode>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	8d ab       	std	Y+53, r24	; 0x35
    1daa:	9e ab       	std	Y+54, r25	; 0x36
    1dac:	af ab       	std	Y+55, r26	; 0x37
    1dae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6d a9       	ldd	r22, Y+53	; 0x35
    1db2:	7e a9       	ldd	r23, Y+54	; 0x36
    1db4:	8f a9       	ldd	r24, Y+55	; 0x37
    1db6:	98 ad       	ldd	r25, Y+56	; 0x38
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a ef       	ldi	r20, 0xFA	; 250
    1dbe:	54 e4       	ldi	r21, 0x44	; 68
    1dc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	89 ab       	std	Y+49, r24	; 0x31
    1dca:	9a ab       	std	Y+50, r25	; 0x32
    1dcc:	ab ab       	std	Y+51, r26	; 0x33
    1dce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1dd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_vidinit+0x18a>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	98 ab       	std	Y+48, r25	; 0x30
    1dee:	8f a7       	std	Y+47, r24	; 0x2f
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_vidinit+0x208>
	else if (__tmp > 65535)
    1df2:	69 a9       	ldd	r22, Y+49	; 0x31
    1df4:	7a a9       	ldd	r23, Y+50	; 0x32
    1df6:	8b a9       	ldd	r24, Y+51	; 0x33
    1df8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_vidinit+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e0c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e10:	98 ad       	ldd	r25, Y+56	; 0x38
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	98 ab       	std	Y+48, r25	; 0x30
    1e30:	8f a7       	std	Y+47, r24	; 0x2f
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_vidinit+0x1ea>
    1e34:	88 ec       	ldi	r24, 0xC8	; 200
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9e a7       	std	Y+46, r25	; 0x2e
    1e3a:	8d a7       	std	Y+45, r24	; 0x2d
    1e3c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e3e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_vidinit+0x1d8>
    1e44:	9e a7       	std	Y+46, r25	; 0x2e
    1e46:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	98 ab       	std	Y+48, r25	; 0x30
    1e50:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e54:	98 a9       	ldd	r25, Y+48	; 0x30
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_vidinit+0x1cc>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_vidinit+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e60:	8b a9       	ldd	r24, Y+51	; 0x33
    1e62:	9c a9       	ldd	r25, Y+52	; 0x34
    1e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	98 ab       	std	Y+48, r25	; 0x30
    1e6e:	8f a7       	std	Y+47, r24	; 0x2f
    1e70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e72:	98 a9       	ldd	r25, Y+48	; 0x30
    1e74:	9c a7       	std	Y+44, r25	; 0x2c
    1e76:	8b a7       	std	Y+43, r24	; 0x2b
    1e78:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_vidinit+0x214>
    1e80:	9c a7       	std	Y+44, r25	; 0x2c
    1e82:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	//Display on LCD and turn off cursor
	LCD_viddisplayOnCursorOff();
    1e84:	0e 94 79 09 	call	0x12f2	; 0x12f2 <LCD_viddisplayOnCursorOff>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a0 e8       	ldi	r26, 0x80	; 128
    1e8e:	bf e3       	ldi	r27, 0x3F	; 63
    1e90:	8f a3       	std	Y+39, r24	; 0x27
    1e92:	98 a7       	std	Y+40, r25	; 0x28
    1e94:	a9 a7       	std	Y+41, r26	; 0x29
    1e96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e98:	6f a1       	ldd	r22, Y+39	; 0x27
    1e9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4a ef       	ldi	r20, 0xFA	; 250
    1ea6:	54 e4       	ldi	r21, 0x44	; 68
    1ea8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	8b a3       	std	Y+35, r24	; 0x23
    1eb2:	9c a3       	std	Y+36, r25	; 0x24
    1eb4:	ad a3       	std	Y+37, r26	; 0x25
    1eb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eba:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e8       	ldi	r20, 0x80	; 128
    1ec6:	5f e3       	ldi	r21, 0x3F	; 63
    1ec8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ecc:	88 23       	and	r24, r24
    1ece:	2c f4       	brge	.+10     	; 0x1eda <LCD_vidinit+0x272>
		__ticks = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9a a3       	std	Y+34, r25	; 0x22
    1ed6:	89 a3       	std	Y+33, r24	; 0x21
    1ed8:	3f c0       	rjmp	.+126    	; 0x1f58 <LCD_vidinit+0x2f0>
	else if (__tmp > 65535)
    1eda:	6b a1       	ldd	r22, Y+35	; 0x23
    1edc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ede:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	3f ef       	ldi	r19, 0xFF	; 255
    1ee6:	4f e7       	ldi	r20, 0x7F	; 127
    1ee8:	57 e4       	ldi	r21, 0x47	; 71
    1eea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eee:	18 16       	cp	r1, r24
    1ef0:	4c f5       	brge	.+82     	; 0x1f44 <LCD_vidinit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e2       	ldi	r20, 0x20	; 32
    1f00:	51 e4       	ldi	r21, 0x41	; 65
    1f02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9a a3       	std	Y+34, r25	; 0x22
    1f18:	89 a3       	std	Y+33, r24	; 0x21
    1f1a:	0f c0       	rjmp	.+30     	; 0x1f3a <LCD_vidinit+0x2d2>
    1f1c:	88 ec       	ldi	r24, 0xC8	; 200
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	98 a3       	std	Y+32, r25	; 0x20
    1f22:	8f 8f       	std	Y+31, r24	; 0x1f
    1f24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f26:	98 a1       	ldd	r25, Y+32	; 0x20
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <LCD_vidinit+0x2c0>
    1f2c:	98 a3       	std	Y+32, r25	; 0x20
    1f2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f30:	89 a1       	ldd	r24, Y+33	; 0x21
    1f32:	9a a1       	ldd	r25, Y+34	; 0x22
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	9a a3       	std	Y+34, r25	; 0x22
    1f38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	69 f7       	brne	.-38     	; 0x1f1c <LCD_vidinit+0x2b4>
    1f42:	14 c0       	rjmp	.+40     	; 0x1f6c <LCD_vidinit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f44:	6b a1       	ldd	r22, Y+35	; 0x23
    1f46:	7c a1       	ldd	r23, Y+36	; 0x24
    1f48:	8d a1       	ldd	r24, Y+37	; 0x25
    1f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9a a3       	std	Y+34, r25	; 0x22
    1f56:	89 a3       	std	Y+33, r24	; 0x21
    1f58:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <LCD_vidinit+0x2fc>
    1f68:	9e 8f       	std	Y+30, r25	; 0x1e
    1f6a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//Clear LCD
	LCD_vidclearDisplay();
    1f6c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_vidclearDisplay>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e4       	ldi	r26, 0x40	; 64
    1f76:	b0 e4       	ldi	r27, 0x40	; 64
    1f78:	89 8f       	std	Y+25, r24	; 0x19
    1f7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	69 8d       	ldd	r22, Y+25	; 0x19
    1f82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a ef       	ldi	r20, 0xFA	; 250
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8d 8b       	std	Y+21, r24	; 0x15
    1f9a:	9e 8b       	std	Y+22, r25	; 0x16
    1f9c:	af 8b       	std	Y+23, r26	; 0x17
    1f9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <LCD_vidinit+0x35a>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 8b       	std	Y+20, r25	; 0x14
    1fbe:	8b 8b       	std	Y+19, r24	; 0x13
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <LCD_vidinit+0x3d8>
	else if (__tmp > 65535)
    1fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <LCD_vidinit+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	69 8d       	ldd	r22, Y+25	; 0x19
    1fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <LCD_vidinit+0x3ba>
    2004:	88 ec       	ldi	r24, 0xC8	; 200
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9a 8b       	std	Y+18, r25	; 0x12
    200a:	89 8b       	std	Y+17, r24	; 0x11
    200c:	89 89       	ldd	r24, Y+17	; 0x11
    200e:	9a 89       	ldd	r25, Y+18	; 0x12
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_vidinit+0x3a8>
    2014:	9a 8b       	std	Y+18, r25	; 0x12
    2016:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8b 89       	ldd	r24, Y+19	; 0x13
    201a:	9c 89       	ldd	r25, Y+20	; 0x14
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	9c 8b       	std	Y+20, r25	; 0x14
    2020:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <LCD_vidinit+0x39c>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <LCD_vidinit+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	6d 89       	ldd	r22, Y+21	; 0x15
    202e:	7e 89       	ldd	r23, Y+22	; 0x16
    2030:	8f 89       	ldd	r24, Y+23	; 0x17
    2032:	98 8d       	ldd	r25, Y+24	; 0x18
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	9c 89       	ldd	r25, Y+20	; 0x14
    2044:	98 8b       	std	Y+16, r25	; 0x10
    2046:	8f 87       	std	Y+15, r24	; 0x0f
    2048:	8f 85       	ldd	r24, Y+15	; 0x0f
    204a:	98 89       	ldd	r25, Y+16	; 0x10
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_vidinit+0x3e4>
    2050:	98 8b       	std	Y+16, r25	; 0x10
    2052:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	//Setting up LCD on entry mode
	LCD_videntryModeSet();
    2054:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <LCD_videntryModeSet>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e8       	ldi	r26, 0x80	; 128
    205e:	bf e3       	ldi	r27, 0x3F	; 63
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	ad 87       	std	Y+13, r26	; 0x0d
    2066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 83       	std	Y+7, r24	; 0x07
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	a9 87       	std	Y+9, r26	; 0x09
    2086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <LCD_vidinit+0x442>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <LCD_vidinit+0x4c0>
	else if (__tmp > 65535)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <LCD_vidinit+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <LCD_vidinit+0x4a2>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_vidinit+0x490>
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <LCD_vidinit+0x484>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <LCD_vidinit+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_vidinit+0x4cc>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    213c:	ca 5b       	subi	r28, 0xBA	; 186
    213e:	df 4f       	sbci	r29, 0xFF	; 255
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	08 95       	ret

00002154 <LCD_vidsendCommand>:
void LCD_vidsendCommand(u8 Copy_u8cmd)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	2f 97       	sbiw	r28, 0x0f	; 15
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	8f 87       	std	Y+15, r24	; 0x0f
	//For command
	DIO_u8setPinVal(LCD_RS_PORT , LCD_RS_PIN , LOW);
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	//For write
	DIO_u8setPinVal(LCD_RW_PORT , LCD_RW_PIN , LOW);
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	//For setting enable HIGH
	DIO_u8setPinVal(LCD_E_PORT , LCD_E_PIN , HIGH);
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	//Send CMD
	DIO_u8setPortVal(LCD_DATA_PORT , Copy_u8cmd);
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	6f 85       	ldd	r22, Y+15	; 0x0f
    218c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_u8setPortVal>
	//For clearing enable
	DIO_u8setPinVal(LCD_E_PORT , LCD_E_PIN , LOW);
    2190:	83 e0       	ldi	r24, 0x03	; 3
    2192:	62 e0       	ldi	r22, 0x02	; 2
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e0       	ldi	r26, 0x00	; 0
    21a0:	b0 e4       	ldi	r27, 0x40	; 64
    21a2:	8b 87       	std	Y+11, r24	; 0x0b
    21a4:	9c 87       	std	Y+12, r25	; 0x0c
    21a6:	ad 87       	std	Y+13, r26	; 0x0d
    21a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	4a ef       	ldi	r20, 0xFA	; 250
    21b8:	54 e4       	ldi	r21, 0x44	; 68
    21ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	8f 83       	std	Y+7, r24	; 0x07
    21c4:	98 87       	std	Y+8, r25	; 0x08
    21c6:	a9 87       	std	Y+9, r26	; 0x09
    21c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ca:	6f 81       	ldd	r22, Y+7	; 0x07
    21cc:	78 85       	ldd	r23, Y+8	; 0x08
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	2c f4       	brge	.+10     	; 0x21ec <LCD_vidsendCommand+0x98>
		__ticks = 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
    21ea:	3f c0       	rjmp	.+126    	; 0x226a <LCD_vidsendCommand+0x116>
	else if (__tmp > 65535)
    21ec:	6f 81       	ldd	r22, Y+7	; 0x07
    21ee:	78 85       	ldd	r23, Y+8	; 0x08
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	57 e4       	ldi	r21, 0x47	; 71
    21fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	4c f5       	brge	.+82     	; 0x2256 <LCD_vidsendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2204:	6b 85       	ldd	r22, Y+11	; 0x0b
    2206:	7c 85       	ldd	r23, Y+12	; 0x0c
    2208:	8d 85       	ldd	r24, Y+13	; 0x0d
    220a:	9e 85       	ldd	r25, Y+14	; 0x0e
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e2       	ldi	r20, 0x20	; 32
    2212:	51 e4       	ldi	r21, 0x41	; 65
    2214:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	0f c0       	rjmp	.+30     	; 0x224c <LCD_vidsendCommand+0xf8>
    222e:	88 ec       	ldi	r24, 0xC8	; 200
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	8b 83       	std	Y+3, r24	; 0x03
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_vidsendCommand+0xe6>
    223e:	9c 83       	std	Y+4, r25	; 0x04
    2240:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	69 f7       	brne	.-38     	; 0x222e <LCD_vidsendCommand+0xda>
    2254:	14 c0       	rjmp	.+40     	; 0x227e <LCD_vidsendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2256:	6f 81       	ldd	r22, Y+7	; 0x07
    2258:	78 85       	ldd	r23, Y+8	; 0x08
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_vidsendCommand+0x122>
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    227e:	2f 96       	adiw	r28, 0x0f	; 15
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <LCD_vidwriteCharacter>:
void LCD_vidwriteCharacter(u8 Copy_u8char)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	2f 97       	sbiw	r28, 0x0f	; 15
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	8f 87       	std	Y+15, r24	; 0x0f
	//For data
	DIO_u8setPinVal(LCD_RS_PORT , LCD_RS_PIN , HIGH);
    22a6:	83 e0       	ldi	r24, 0x03	; 3
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	//For write
	DIO_u8setPinVal(LCD_RW_PORT , LCD_RW_PIN , LOW);
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	61 e0       	ldi	r22, 0x01	; 1
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	//For setting enable HIGH
	DIO_u8setPinVal(LCD_E_PORT , LCD_E_PIN , HIGH);
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	62 e0       	ldi	r22, 0x02	; 2
    22be:	41 e0       	ldi	r20, 0x01	; 1
    22c0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	//Send Char
	DIO_u8setPortVal(LCD_DATA_PORT , Copy_u8char);
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    22c8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_u8setPortVal>
	//For clearing enable
	DIO_u8setPinVal(LCD_E_PORT , LCD_E_PIN , LOW);
    22cc:	83 e0       	ldi	r24, 0x03	; 3
    22ce:	62 e0       	ldi	r22, 0x02	; 2
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 e0       	ldi	r26, 0x00	; 0
    22dc:	b0 e4       	ldi	r27, 0x40	; 64
    22de:	8b 87       	std	Y+11, r24	; 0x0b
    22e0:	9c 87       	std	Y+12, r25	; 0x0c
    22e2:	ad 87       	std	Y+13, r26	; 0x0d
    22e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a ef       	ldi	r20, 0xFA	; 250
    22f4:	54 e4       	ldi	r21, 0x44	; 68
    22f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8f 83       	std	Y+7, r24	; 0x07
    2300:	98 87       	std	Y+8, r25	; 0x08
    2302:	a9 87       	std	Y+9, r26	; 0x09
    2304:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e8       	ldi	r20, 0x80	; 128
    2314:	5f e3       	ldi	r21, 0x3F	; 63
    2316:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    231a:	88 23       	and	r24, r24
    231c:	2c f4       	brge	.+10     	; 0x2328 <LCD_vidwriteCharacter+0x98>
		__ticks = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	3f c0       	rjmp	.+126    	; 0x23a6 <LCD_vidwriteCharacter+0x116>
	else if (__tmp > 65535)
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	4c f5       	brge	.+82     	; 0x2392 <LCD_vidwriteCharacter+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2340:	6b 85       	ldd	r22, Y+11	; 0x0b
    2342:	7c 85       	ldd	r23, Y+12	; 0x0c
    2344:	8d 85       	ldd	r24, Y+13	; 0x0d
    2346:	9e 85       	ldd	r25, Y+14	; 0x0e
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <LCD_vidwriteCharacter+0xf8>
    236a:	88 ec       	ldi	r24, 0xC8	; 200
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	8b 83       	std	Y+3, r24	; 0x03
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_vidwriteCharacter+0xe6>
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	9e 81       	ldd	r25, Y+6	; 0x06
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	69 f7       	brne	.-38     	; 0x236a <LCD_vidwriteCharacter+0xda>
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <LCD_vidwriteCharacter+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_vidwriteCharacter+0x122>
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    23ba:	2f 96       	adiw	r28, 0x0f	; 15
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <KEYPAD_vidInit>:
														 {1  , 2 ,  3  , '-'},
														 {'c', 0 , '=' , '+'}
												};

void KEYPAD_vidInit()
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
	/*Set rows as input*/
	DIO_u8setPinDir(KEYPAD_PORT,KEYPAD_ROW_1,INPUT);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT,KEYPAD_ROW_2,INPUT);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	61 e0       	ldi	r22, 0x01	; 1
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT,KEYPAD_ROW_3,INPUT);
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	62 e0       	ldi	r22, 0x02	; 2
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT,KEYPAD_ROW_4,INPUT);
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	63 e0       	ldi	r22, 0x03	; 3
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_u8setPinDir>
	/*Set columns as output*/
	DIO_u8setPinDir(KEYPAD_PORT,KEYPAD_COLUMN_1,OUTPUT);
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	64 e0       	ldi	r22, 0x04	; 4
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT,KEYPAD_COLUMN_2,OUTPUT);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	65 e0       	ldi	r22, 0x05	; 5
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT,KEYPAD_COLUMN_3,OUTPUT);
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	66 e0       	ldi	r22, 0x06	; 6
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_u8setPinDir>
	DIO_u8setPinDir(KEYPAD_PORT,KEYPAD_COLUMN_4,OUTPUT);
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	67 e0       	ldi	r22, 0x07	; 7
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	0e 94 7d 06 	call	0xcfa	; 0xcfa <DIO_u8setPinDir>

	/*Enable pull-up resistors for keypad rows*/
	DIO_u8setPinVal(KEYPAD_PORT,KEYPAD_ROW_1,HIGH);
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	41 e0       	ldi	r20, 0x01	; 1
    242a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT,KEYPAD_ROW_2,HIGH);
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT,KEYPAD_ROW_3,HIGH);
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	62 e0       	ldi	r22, 0x02	; 2
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT,KEYPAD_ROW_4,HIGH);
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	63 e0       	ldi	r22, 0x03	; 3
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	/*Set initial values for keypad columns*/
	DIO_u8setPinVal(KEYPAD_PORT,KEYPAD_COLUMN_1,HIGH);
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	64 e0       	ldi	r22, 0x04	; 4
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT,KEYPAD_COLUMN_2,HIGH);
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	65 e0       	ldi	r22, 0x05	; 5
    245a:	41 e0       	ldi	r20, 0x01	; 1
    245c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT,KEYPAD_COLUMN_3,HIGH);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	66 e0       	ldi	r22, 0x06	; 6
    2464:	41 e0       	ldi	r20, 0x01	; 1
    2466:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	DIO_u8setPinVal(KEYPAD_PORT,KEYPAD_COLUMN_4,HIGH);
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	67 e0       	ldi	r22, 0x07	; 7
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>


}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <KEYPAD_u8GetPressed>:
u8 KEYPAD_u8GetPressed()
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	a0 97       	sbiw	r28, 0x20	; 32
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyPressed = NO_KEY_PRESSED ;
    248e:	8f ef       	ldi	r24, 0xFF	; 255
    2490:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 Local_u8CurrentColumn;
	u8 Local_u8CurrentRow;
	u8 Local_u8CurrentRowStatus;

	for(Local_u8CurrentColumn=KEYPAD_COLUMN_START ; Local_u8CurrentColumn<=KEYPAD_COLUMN_END ; Local_u8CurrentColumn++)
    2492:	84 e0       	ldi	r24, 0x04	; 4
    2494:	8e 8f       	std	Y+30, r24	; 0x1e
    2496:	27 c1       	rjmp	.+590    	; 0x26e6 <KEYPAD_u8GetPressed+0x26c>
	{
		/* Activate the current column*/
		DIO_u8setPinVal(KEYPAD_PORT,Local_u8CurrentColumn,LOW);
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
		for(Local_u8CurrentRow=KEYPAD_ROW_START ; Local_u8CurrentRow<=KEYPAD_ROW_END ; Local_u8CurrentRow++)
    24a2:	1d 8e       	std	Y+29, r1	; 0x1d
    24a4:	14 c1       	rjmp	.+552    	; 0x26ce <KEYPAD_u8GetPressed+0x254>
		{
			DIO_u8getPinVal(KEYPAD_PORT,Local_u8CurrentRow,&Local_u8CurrentRowStatus);
    24a6:	9e 01       	movw	r18, r28
    24a8:	20 5e       	subi	r18, 0xE0	; 224
    24aa:	3f 4f       	sbci	r19, 0xFF	; 255
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24b0:	a9 01       	movw	r20, r18
    24b2:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8getPinVal>
			if(Local_u8CurrentRowStatus == LOW)
    24b6:	88 a1       	ldd	r24, Y+32	; 0x20
    24b8:	88 23       	and	r24, r24
    24ba:	09 f0       	breq	.+2      	; 0x24be <KEYPAD_u8GetPressed+0x44>
    24bc:	05 c1       	rjmp	.+522    	; 0x26c8 <KEYPAD_u8GetPressed+0x24e>
			{
				/* Using 1D array*/
				//Local_u8KeyPressed = (((Local_u8CurrentRow-KEYPAD_ROW_START)*KEYPAD_COLS) + (Local_u8CurrentColumn-KEYPAD_COLUMN_START));
				/* Using 2D array*/
				Local_u8KeyPressed = KEYPAD_u8KeypadMap[Local_u8CurrentRow-KEYPAD_ROW_START][Local_u8CurrentColumn-KEYPAD_COLUMN_START];
    24be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24c0:	48 2f       	mov	r20, r24
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9c 01       	movw	r18, r24
    24cc:	24 50       	subi	r18, 0x04	; 4
    24ce:	30 40       	sbci	r19, 0x00	; 0
    24d0:	ca 01       	movw	r24, r20
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	82 0f       	add	r24, r18
    24dc:	93 1f       	adc	r25, r19
    24de:	fc 01       	movw	r30, r24
    24e0:	ed 53       	subi	r30, 0x3D	; 61
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 81       	ld	r24, Z
    24e6:	8f 8f       	std	Y+31, r24	; 0x1f
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a0 ea       	ldi	r26, 0xA0	; 160
    24ee:	b0 e4       	ldi	r27, 0x40	; 64
    24f0:	89 8f       	std	Y+25, r24	; 0x19
    24f2:	9a 8f       	std	Y+26, r25	; 0x1a
    24f4:	ab 8f       	std	Y+27, r26	; 0x1b
    24f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f8:	69 8d       	ldd	r22, Y+25	; 0x19
    24fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	4a ef       	ldi	r20, 0xFA	; 250
    2506:	54 e4       	ldi	r21, 0x44	; 68
    2508:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8d 8b       	std	Y+21, r24	; 0x15
    2512:	9e 8b       	std	Y+22, r25	; 0x16
    2514:	af 8b       	std	Y+23, r26	; 0x17
    2516:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2518:	6d 89       	ldd	r22, Y+21	; 0x15
    251a:	7e 89       	ldd	r23, Y+22	; 0x16
    251c:	8f 89       	ldd	r24, Y+23	; 0x17
    251e:	98 8d       	ldd	r25, Y+24	; 0x18
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	2c f4       	brge	.+10     	; 0x253a <KEYPAD_u8GetPressed+0xc0>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
    2538:	3f c0       	rjmp	.+126    	; 0x25b8 <KEYPAD_u8GetPressed+0x13e>
	else if (__tmp > 65535)
    253a:	6d 89       	ldd	r22, Y+21	; 0x15
    253c:	7e 89       	ldd	r23, Y+22	; 0x16
    253e:	8f 89       	ldd	r24, Y+23	; 0x17
    2540:	98 8d       	ldd	r25, Y+24	; 0x18
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	4c f5       	brge	.+82     	; 0x25a4 <KEYPAD_u8GetPressed+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2552:	69 8d       	ldd	r22, Y+25	; 0x19
    2554:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2556:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2558:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e2       	ldi	r20, 0x20	; 32
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9c 8b       	std	Y+20, r25	; 0x14
    2578:	8b 8b       	std	Y+19, r24	; 0x13
    257a:	0f c0       	rjmp	.+30     	; 0x259a <KEYPAD_u8GetPressed+0x120>
    257c:	88 ec       	ldi	r24, 0xC8	; 200
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9a 8b       	std	Y+18, r25	; 0x12
    2582:	89 8b       	std	Y+17, r24	; 0x11
    2584:	89 89       	ldd	r24, Y+17	; 0x11
    2586:	9a 89       	ldd	r25, Y+18	; 0x12
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <KEYPAD_u8GetPressed+0x10e>
    258c:	9a 8b       	std	Y+18, r25	; 0x12
    258e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	9c 8b       	std	Y+20, r25	; 0x14
    2598:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	8b 89       	ldd	r24, Y+19	; 0x13
    259c:	9c 89       	ldd	r25, Y+20	; 0x14
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	69 f7       	brne	.-38     	; 0x257c <KEYPAD_u8GetPressed+0x102>
    25a2:	1d c0       	rjmp	.+58     	; 0x25de <KEYPAD_u8GetPressed+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a4:	6d 89       	ldd	r22, Y+21	; 0x15
    25a6:	7e 89       	ldd	r23, Y+22	; 0x16
    25a8:	8f 89       	ldd	r24, Y+23	; 0x17
    25aa:	98 8d       	ldd	r25, Y+24	; 0x18
    25ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9c 8b       	std	Y+20, r25	; 0x14
    25b6:	8b 8b       	std	Y+19, r24	; 0x13
    25b8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ba:	9c 89       	ldd	r25, Y+20	; 0x14
    25bc:	98 8b       	std	Y+16, r25	; 0x10
    25be:	8f 87       	std	Y+15, r24	; 0x0f
    25c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c2:	98 89       	ldd	r25, Y+16	; 0x10
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <KEYPAD_u8GetPressed+0x14a>
    25c8:	98 8b       	std	Y+16, r25	; 0x10
    25ca:	8f 87       	std	Y+15, r24	; 0x0f
    25cc:	08 c0       	rjmp	.+16     	; 0x25de <KEYPAD_u8GetPressed+0x164>
				_delay_ms(5);
				while(Local_u8CurrentRowStatus == LOW)
				{
					DIO_u8getPinVal(KEYPAD_PORT,Local_u8CurrentRow,&Local_u8CurrentRowStatus);
    25ce:	9e 01       	movw	r18, r28
    25d0:	20 5e       	subi	r18, 0xE0	; 224
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    25d8:	a9 01       	movw	r20, r18
    25da:	0e 94 a1 08 	call	0x1142	; 0x1142 <DIO_u8getPinVal>
				/* Using 1D array*/
				//Local_u8KeyPressed = (((Local_u8CurrentRow-KEYPAD_ROW_START)*KEYPAD_COLS) + (Local_u8CurrentColumn-KEYPAD_COLUMN_START));
				/* Using 2D array*/
				Local_u8KeyPressed = KEYPAD_u8KeypadMap[Local_u8CurrentRow-KEYPAD_ROW_START][Local_u8CurrentColumn-KEYPAD_COLUMN_START];
				_delay_ms(5);
				while(Local_u8CurrentRowStatus == LOW)
    25de:	88 a1       	ldd	r24, Y+32	; 0x20
    25e0:	88 23       	and	r24, r24
    25e2:	a9 f3       	breq	.-22     	; 0x25ce <KEYPAD_u8GetPressed+0x154>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a0 ea       	ldi	r26, 0xA0	; 160
    25ea:	b0 e4       	ldi	r27, 0x40	; 64
    25ec:	8b 87       	std	Y+11, r24	; 0x0b
    25ee:	9c 87       	std	Y+12, r25	; 0x0c
    25f0:	ad 87       	std	Y+13, r26	; 0x0d
    25f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	4a ef       	ldi	r20, 0xFA	; 250
    2602:	54 e4       	ldi	r21, 0x44	; 68
    2604:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	8f 83       	std	Y+7, r24	; 0x07
    260e:	98 87       	std	Y+8, r25	; 0x08
    2610:	a9 87       	std	Y+9, r26	; 0x09
    2612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e8       	ldi	r20, 0x80	; 128
    2622:	5f e3       	ldi	r21, 0x3F	; 63
    2624:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2628:	88 23       	and	r24, r24
    262a:	2c f4       	brge	.+10     	; 0x2636 <KEYPAD_u8GetPressed+0x1bc>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	3f c0       	rjmp	.+126    	; 0x26b4 <KEYPAD_u8GetPressed+0x23a>
	else if (__tmp > 65535)
    2636:	6f 81       	ldd	r22, Y+7	; 0x07
    2638:	78 85       	ldd	r23, Y+8	; 0x08
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	9a 85       	ldd	r25, Y+10	; 0x0a
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	4f e7       	ldi	r20, 0x7F	; 127
    2644:	57 e4       	ldi	r21, 0x47	; 71
    2646:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    264a:	18 16       	cp	r1, r24
    264c:	4c f5       	brge	.+82     	; 0x26a0 <KEYPAD_u8GetPressed+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2650:	7c 85       	ldd	r23, Y+12	; 0x0c
    2652:	8d 85       	ldd	r24, Y+13	; 0x0d
    2654:	9e 85       	ldd	r25, Y+14	; 0x0e
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e2       	ldi	r20, 0x20	; 32
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	bc 01       	movw	r22, r24
    2668:	cd 01       	movw	r24, r26
    266a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
    2676:	0f c0       	rjmp	.+30     	; 0x2696 <KEYPAD_u8GetPressed+0x21c>
    2678:	88 ec       	ldi	r24, 0xC8	; 200
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <KEYPAD_u8GetPressed+0x20a>
    2688:	9c 83       	std	Y+4, r25	; 0x04
    268a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
    2698:	9e 81       	ldd	r25, Y+6	; 0x06
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	69 f7       	brne	.-38     	; 0x2678 <KEYPAD_u8GetPressed+0x1fe>
    269e:	14 c0       	rjmp	.+40     	; 0x26c8 <KEYPAD_u8GetPressed+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9e 83       	std	Y+6, r25	; 0x06
    26b2:	8d 83       	std	Y+5, r24	; 0x05
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	9e 81       	ldd	r25, Y+6	; 0x06
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <KEYPAD_u8GetPressed+0x246>
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01

	for(Local_u8CurrentColumn=KEYPAD_COLUMN_START ; Local_u8CurrentColumn<=KEYPAD_COLUMN_END ; Local_u8CurrentColumn++)
	{
		/* Activate the current column*/
		DIO_u8setPinVal(KEYPAD_PORT,Local_u8CurrentColumn,LOW);
		for(Local_u8CurrentRow=KEYPAD_ROW_START ; Local_u8CurrentRow<=KEYPAD_ROW_END ; Local_u8CurrentRow++)
    26c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ca:	8f 5f       	subi	r24, 0xFF	; 255
    26cc:	8d 8f       	std	Y+29, r24	; 0x1d
    26ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	08 f4       	brcc	.+2      	; 0x26d6 <KEYPAD_u8GetPressed+0x25c>
    26d4:	e8 ce       	rjmp	.-560    	; 0x24a6 <KEYPAD_u8GetPressed+0x2c>
					DIO_u8getPinVal(KEYPAD_PORT,Local_u8CurrentRow,&Local_u8CurrentRowStatus);
				}
				_delay_ms(5);
			}
		}
		DIO_u8setPinVal(KEYPAD_PORT,Local_u8CurrentColumn,HIGH);
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <DIO_u8setPinVal>
	u8 Local_u8KeyPressed = NO_KEY_PRESSED ;
	u8 Local_u8CurrentColumn;
	u8 Local_u8CurrentRow;
	u8 Local_u8CurrentRowStatus;

	for(Local_u8CurrentColumn=KEYPAD_COLUMN_START ; Local_u8CurrentColumn<=KEYPAD_COLUMN_END ; Local_u8CurrentColumn++)
    26e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26e2:	8f 5f       	subi	r24, 0xFF	; 255
    26e4:	8e 8f       	std	Y+30, r24	; 0x1e
    26e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26e8:	88 30       	cpi	r24, 0x08	; 8
    26ea:	08 f4       	brcc	.+2      	; 0x26ee <KEYPAD_u8GetPressed+0x274>
    26ec:	d5 ce       	rjmp	.-598    	; 0x2498 <KEYPAD_u8GetPressed+0x1e>
				_delay_ms(5);
			}
		}
		DIO_u8setPinVal(KEYPAD_PORT,Local_u8CurrentColumn,HIGH);
	}
	return Local_u8KeyPressed;
    26ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    26f0:	a0 96       	adiw	r28, 0x20	; 32
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <main>:
#include"../HAL/LCD_handler_v1/LCD_Functions.h"
#include"util/delay.h"
#define NO_KEY_PRESSED 255

void main()
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	c1 54       	subi	r28, 0x41	; 65
    270c:	d0 40       	sbci	r29, 0x00	; 0
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
	/*Initializations*/
	LCD_vidinit();
    2718:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_vidinit>
	LCD_u8goTo(0,4);
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	64 e0       	ldi	r22, 0x04	; 4
    2720:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_u8goTo>
	LCD_vidwriteString("Hedra Sami");
    2724:	87 e9       	ldi	r24, 0x97	; 151
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_vidwriteString>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a0 ef       	ldi	r26, 0xF0	; 240
    2732:	b1 e4       	ldi	r27, 0x41	; 65
    2734:	8f a3       	std	Y+39, r24	; 0x27
    2736:	98 a7       	std	Y+40, r25	; 0x28
    2738:	a9 a7       	std	Y+41, r26	; 0x29
    273a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273c:	6f a1       	ldd	r22, Y+39	; 0x27
    273e:	78 a5       	ldd	r23, Y+40	; 0x28
    2740:	89 a5       	ldd	r24, Y+41	; 0x29
    2742:	9a a5       	ldd	r25, Y+42	; 0x2a
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a ef       	ldi	r20, 0xFA	; 250
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	8b a3       	std	Y+35, r24	; 0x23
    2756:	9c a3       	std	Y+36, r25	; 0x24
    2758:	ad a3       	std	Y+37, r26	; 0x25
    275a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    275c:	6b a1       	ldd	r22, Y+35	; 0x23
    275e:	7c a1       	ldd	r23, Y+36	; 0x24
    2760:	8d a1       	ldd	r24, Y+37	; 0x25
    2762:	9e a1       	ldd	r25, Y+38	; 0x26
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	2c f4       	brge	.+10     	; 0x277e <main+0x7c>
		__ticks = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9a a3       	std	Y+34, r25	; 0x22
    277a:	89 a3       	std	Y+33, r24	; 0x21
    277c:	3f c0       	rjmp	.+126    	; 0x27fc <main+0xfa>
	else if (__tmp > 65535)
    277e:	6b a1       	ldd	r22, Y+35	; 0x23
    2780:	7c a1       	ldd	r23, Y+36	; 0x24
    2782:	8d a1       	ldd	r24, Y+37	; 0x25
    2784:	9e a1       	ldd	r25, Y+38	; 0x26
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	3f ef       	ldi	r19, 0xFF	; 255
    278a:	4f e7       	ldi	r20, 0x7F	; 127
    278c:	57 e4       	ldi	r21, 0x47	; 71
    278e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2792:	18 16       	cp	r1, r24
    2794:	4c f5       	brge	.+82     	; 0x27e8 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2796:	6f a1       	ldd	r22, Y+39	; 0x27
    2798:	78 a5       	ldd	r23, Y+40	; 0x28
    279a:	89 a5       	ldd	r24, Y+41	; 0x29
    279c:	9a a5       	ldd	r25, Y+42	; 0x2a
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e2       	ldi	r20, 0x20	; 32
    27a4:	51 e4       	ldi	r21, 0x41	; 65
    27a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9a a3       	std	Y+34, r25	; 0x22
    27bc:	89 a3       	std	Y+33, r24	; 0x21
    27be:	0f c0       	rjmp	.+30     	; 0x27de <main+0xdc>
    27c0:	88 ec       	ldi	r24, 0xC8	; 200
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	98 a3       	std	Y+32, r25	; 0x20
    27c6:	8f 8f       	std	Y+31, r24	; 0x1f
    27c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27ca:	98 a1       	ldd	r25, Y+32	; 0x20
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <main+0xca>
    27d0:	98 a3       	std	Y+32, r25	; 0x20
    27d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d4:	89 a1       	ldd	r24, Y+33	; 0x21
    27d6:	9a a1       	ldd	r25, Y+34	; 0x22
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	9a a3       	std	Y+34, r25	; 0x22
    27dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27de:	89 a1       	ldd	r24, Y+33	; 0x21
    27e0:	9a a1       	ldd	r25, Y+34	; 0x22
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	69 f7       	brne	.-38     	; 0x27c0 <main+0xbe>
    27e6:	14 c0       	rjmp	.+40     	; 0x2810 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e8:	6b a1       	ldd	r22, Y+35	; 0x23
    27ea:	7c a1       	ldd	r23, Y+36	; 0x24
    27ec:	8d a1       	ldd	r24, Y+37	; 0x25
    27ee:	9e a1       	ldd	r25, Y+38	; 0x26
    27f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9a a3       	std	Y+34, r25	; 0x22
    27fa:	89 a3       	std	Y+33, r24	; 0x21
    27fc:	89 a1       	ldd	r24, Y+33	; 0x21
    27fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2800:	9e 8f       	std	Y+30, r25	; 0x1e
    2802:	8d 8f       	std	Y+29, r24	; 0x1d
    2804:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2806:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <main+0x106>
    280c:	9e 8f       	std	Y+30, r25	; 0x1e
    280e:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(30);
	LCD_u8goTo(1,2);
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	62 e0       	ldi	r22, 0x02	; 2
    2814:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_u8goTo>
	LCD_vidwriteString("D2B_Converter");
    2818:	82 ea       	ldi	r24, 0xA2	; 162
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_vidwriteString>
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	a0 ef       	ldi	r26, 0xF0	; 240
    2826:	b1 e4       	ldi	r27, 0x41	; 65
    2828:	89 8f       	std	Y+25, r24	; 0x19
    282a:	9a 8f       	std	Y+26, r25	; 0x1a
    282c:	ab 8f       	std	Y+27, r26	; 0x1b
    282e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2830:	69 8d       	ldd	r22, Y+25	; 0x19
    2832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	4a ef       	ldi	r20, 0xFA	; 250
    283e:	54 e4       	ldi	r21, 0x44	; 68
    2840:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	8d 8b       	std	Y+21, r24	; 0x15
    284a:	9e 8b       	std	Y+22, r25	; 0x16
    284c:	af 8b       	std	Y+23, r26	; 0x17
    284e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2850:	6d 89       	ldd	r22, Y+21	; 0x15
    2852:	7e 89       	ldd	r23, Y+22	; 0x16
    2854:	8f 89       	ldd	r24, Y+23	; 0x17
    2856:	98 8d       	ldd	r25, Y+24	; 0x18
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e8       	ldi	r20, 0x80	; 128
    285e:	5f e3       	ldi	r21, 0x3F	; 63
    2860:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2864:	88 23       	and	r24, r24
    2866:	2c f4       	brge	.+10     	; 0x2872 <main+0x170>
		__ticks = 1;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	9c 8b       	std	Y+20, r25	; 0x14
    286e:	8b 8b       	std	Y+19, r24	; 0x13
    2870:	3f c0       	rjmp	.+126    	; 0x28f0 <main+0x1ee>
	else if (__tmp > 65535)
    2872:	6d 89       	ldd	r22, Y+21	; 0x15
    2874:	7e 89       	ldd	r23, Y+22	; 0x16
    2876:	8f 89       	ldd	r24, Y+23	; 0x17
    2878:	98 8d       	ldd	r25, Y+24	; 0x18
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	3f ef       	ldi	r19, 0xFF	; 255
    287e:	4f e7       	ldi	r20, 0x7F	; 127
    2880:	57 e4       	ldi	r21, 0x47	; 71
    2882:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2886:	18 16       	cp	r1, r24
    2888:	4c f5       	brge	.+82     	; 0x28dc <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288a:	69 8d       	ldd	r22, Y+25	; 0x19
    288c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e2       	ldi	r20, 0x20	; 32
    2898:	51 e4       	ldi	r21, 0x41	; 65
    289a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	9c 8b       	std	Y+20, r25	; 0x14
    28b0:	8b 8b       	std	Y+19, r24	; 0x13
    28b2:	0f c0       	rjmp	.+30     	; 0x28d2 <main+0x1d0>
    28b4:	88 ec       	ldi	r24, 0xC8	; 200
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9a 8b       	std	Y+18, r25	; 0x12
    28ba:	89 8b       	std	Y+17, r24	; 0x11
    28bc:	89 89       	ldd	r24, Y+17	; 0x11
    28be:	9a 89       	ldd	r25, Y+18	; 0x12
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <main+0x1be>
    28c4:	9a 8b       	std	Y+18, r25	; 0x12
    28c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ca:	9c 89       	ldd	r25, Y+20	; 0x14
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	9c 8b       	std	Y+20, r25	; 0x14
    28d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d2:	8b 89       	ldd	r24, Y+19	; 0x13
    28d4:	9c 89       	ldd	r25, Y+20	; 0x14
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	69 f7       	brne	.-38     	; 0x28b4 <main+0x1b2>
    28da:	14 c0       	rjmp	.+40     	; 0x2904 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28dc:	6d 89       	ldd	r22, Y+21	; 0x15
    28de:	7e 89       	ldd	r23, Y+22	; 0x16
    28e0:	8f 89       	ldd	r24, Y+23	; 0x17
    28e2:	98 8d       	ldd	r25, Y+24	; 0x18
    28e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	9c 8b       	std	Y+20, r25	; 0x14
    28ee:	8b 8b       	std	Y+19, r24	; 0x13
    28f0:	8b 89       	ldd	r24, Y+19	; 0x13
    28f2:	9c 89       	ldd	r25, Y+20	; 0x14
    28f4:	98 8b       	std	Y+16, r25	; 0x10
    28f6:	8f 87       	std	Y+15, r24	; 0x0f
    28f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fa:	98 89       	ldd	r25, Y+16	; 0x10
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <main+0x1fa>
    2900:	98 8b       	std	Y+16, r25	; 0x10
    2902:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(30);
	LCD_u8goTo(1,2);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	62 e0       	ldi	r22, 0x02	; 2
    2908:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_u8goTo>
	LCD_vidwriteString("D2B_Converter");
    290c:	82 ea       	ldi	r24, 0xA2	; 162
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_vidwriteString>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	a0 ef       	ldi	r26, 0xF0	; 240
    291a:	b1 e4       	ldi	r27, 0x41	; 65
    291c:	8b 87       	std	Y+11, r24	; 0x0b
    291e:	9c 87       	std	Y+12, r25	; 0x0c
    2920:	ad 87       	std	Y+13, r26	; 0x0d
    2922:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2924:	6b 85       	ldd	r22, Y+11	; 0x0b
    2926:	7c 85       	ldd	r23, Y+12	; 0x0c
    2928:	8d 85       	ldd	r24, Y+13	; 0x0d
    292a:	9e 85       	ldd	r25, Y+14	; 0x0e
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a ef       	ldi	r20, 0xFA	; 250
    2932:	54 e4       	ldi	r21, 0x44	; 68
    2934:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	8f 83       	std	Y+7, r24	; 0x07
    293e:	98 87       	std	Y+8, r25	; 0x08
    2940:	a9 87       	std	Y+9, r26	; 0x09
    2942:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2958:	88 23       	and	r24, r24
    295a:	2c f4       	brge	.+10     	; 0x2966 <main+0x264>
		__ticks = 1;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	3f c0       	rjmp	.+126    	; 0x29e4 <main+0x2e2>
	else if (__tmp > 65535)
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	3f ef       	ldi	r19, 0xFF	; 255
    2972:	4f e7       	ldi	r20, 0x7F	; 127
    2974:	57 e4       	ldi	r21, 0x47	; 71
    2976:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    297a:	18 16       	cp	r1, r24
    297c:	4c f5       	brge	.+82     	; 0x29d0 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2980:	7c 85       	ldd	r23, Y+12	; 0x0c
    2982:	8d 85       	ldd	r24, Y+13	; 0x0d
    2984:	9e 85       	ldd	r25, Y+14	; 0x0e
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <main+0x2c4>
    29a8:	88 ec       	ldi	r24, 0xC8	; 200
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9c 83       	std	Y+4, r25	; 0x04
    29ae:	8b 83       	std	Y+3, r24	; 0x03
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <main+0x2b2>
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	69 f7       	brne	.-38     	; 0x29a8 <main+0x2a6>
    29ce:	14 c0       	rjmp	.+40     	; 0x29f8 <main+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	6f 81       	ldd	r22, Y+7	; 0x07
    29d2:	78 85       	ldd	r23, Y+8	; 0x08
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <main+0x2ee>
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
	LCD_vidclearDisplay();
    29f8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_vidclearDisplay>
	LCD_viddisplayOnCursorOn();
    29fc:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_viddisplayOnCursorOn>
	LCD_vidblinkCursor();
    2a00:	0e 94 a1 09 	call	0x1342	; 0x1342 <LCD_vidblinkCursor>
	KEYPAD_vidInit();
    2a04:	0e 94 e6 11 	call	0x23cc	; 0x23cc <KEYPAD_vidInit>
	u8 Local_u8Keypressed;
	u32 Local_u32Num=0;
    2a08:	19 aa       	std	Y+49, r1	; 0x31
    2a0a:	1a aa       	std	Y+50, r1	; 0x32
    2a0c:	1b aa       	std	Y+51, r1	; 0x33
    2a0e:	1c aa       	std	Y+52, r1	; 0x34
	u8 num_organize[10];
	u8 Local_u8NumLength = 0 ;
    2a10:	18 aa       	std	Y+48, r1	; 0x30
	u32 iteration=1;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	a0 e0       	ldi	r26, 0x00	; 0
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	8c a7       	std	Y+44, r24	; 0x2c
    2a1c:	9d a7       	std	Y+45, r25	; 0x2d
    2a1e:	ae a7       	std	Y+46, r26	; 0x2e
    2a20:	bf a7       	std	Y+47, r27	; 0x2f
	Local_u8Keypressed = NO_KEY_PRESSED;
    2a22:	8f ef       	ldi	r24, 0xFF	; 255
    2a24:	8d ab       	std	Y+53, r24	; 0x35
	while(1)
	{
		LCD_vidwriteString("Enter Num:");
    2a26:	80 eb       	ldi	r24, 0xB0	; 176
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_vidwriteString>
    2a2e:	5a c0       	rjmp	.+180    	; 0x2ae4 <main+0x3e2>
		/*Enter the decimal number*/
		while(Local_u8Keypressed!='=')
		{
			Local_u8Keypressed = KEYPAD_u8GetPressed();
    2a30:	0e 94 3d 12 	call	0x247a	; 0x247a <KEYPAD_u8GetPressed>
    2a34:	8d ab       	std	Y+53, r24	; 0x35
			if(Local_u8Keypressed != NO_KEY_PRESSED)
    2a36:	8d a9       	ldd	r24, Y+53	; 0x35
    2a38:	8f 3f       	cpi	r24, 0xFF	; 255
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <main+0x33c>
    2a3c:	53 c0       	rjmp	.+166    	; 0x2ae4 <main+0x3e2>
			{
				if(Local_u8Keypressed<=9)
    2a3e:	8d a9       	ldd	r24, Y+53	; 0x35
    2a40:	8a 30       	cpi	r24, 0x0A	; 10
    2a42:	b8 f4       	brcc	.+46     	; 0x2a72 <main+0x370>
				{
					LCD_vidwriteNumber(Local_u8Keypressed);
    2a44:	8d a9       	ldd	r24, Y+53	; 0x35
    2a46:	88 2f       	mov	r24, r24
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	a0 e0       	ldi	r26, 0x00	; 0
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <LCD_vidwriteNumber>
					num_organize[Local_u8NumLength]=Local_u8Keypressed;
    2a56:	88 a9       	ldd	r24, Y+48	; 0x30
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	c6 96       	adiw	r24, 0x36	; 54
    2a60:	fc 01       	movw	r30, r24
    2a62:	e2 0f       	add	r30, r18
    2a64:	f3 1f       	adc	r31, r19
    2a66:	8d a9       	ldd	r24, Y+53	; 0x35
    2a68:	80 83       	st	Z, r24
					Local_u8NumLength++;
    2a6a:	88 a9       	ldd	r24, Y+48	; 0x30
    2a6c:	8f 5f       	subi	r24, 0xFF	; 255
    2a6e:	88 ab       	std	Y+48, r24	; 0x30
    2a70:	39 c0       	rjmp	.+114    	; 0x2ae4 <main+0x3e2>
				}
				else
				{
					switch(Local_u8Keypressed)
    2a72:	8d a9       	ldd	r24, Y+53	; 0x35
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	22 96       	adiw	r28, 0x02	; 2
    2a7a:	3f af       	std	Y+63, r19	; 0x3f
    2a7c:	2e af       	std	Y+62, r18	; 0x3e
    2a7e:	22 97       	sbiw	r28, 0x02	; 2
    2a80:	22 96       	adiw	r28, 0x02	; 2
    2a82:	4e ad       	ldd	r20, Y+62	; 0x3e
    2a84:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a86:	22 97       	sbiw	r28, 0x02	; 2
    2a88:	4d 33       	cpi	r20, 0x3D	; 61
    2a8a:	51 05       	cpc	r21, r1
    2a8c:	59 f1       	breq	.+86     	; 0x2ae4 <main+0x3e2>
    2a8e:	22 96       	adiw	r28, 0x02	; 2
    2a90:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a92:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a94:	22 97       	sbiw	r28, 0x02	; 2
    2a96:	83 36       	cpi	r24, 0x63	; 99
    2a98:	91 05       	cpc	r25, r1
    2a9a:	41 f0       	breq	.+16     	; 0x2aac <main+0x3aa>
    2a9c:	22 96       	adiw	r28, 0x02	; 2
    2a9e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2aa0:	3f ad       	ldd	r19, Y+63	; 0x3f
    2aa2:	22 97       	sbiw	r28, 0x02	; 2
    2aa4:	2d 32       	cpi	r18, 0x2D	; 45
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	49 f0       	breq	.+18     	; 0x2abc <main+0x3ba>
    2aaa:	1c c0       	rjmp	.+56     	; 0x2ae4 <main+0x3e2>
					{
					case'=':
						break;
					case 'c':
						Local_u8NumLength=0;
    2aac:	18 aa       	std	Y+48, r1	; 0x30
						LCD_vidclearDisplay();
    2aae:	0e 94 e7 09 	call	0x13ce	; 0x13ce <LCD_vidclearDisplay>
						LCD_vidwriteString("Enter Num:");
    2ab2:	80 eb       	ldi	r24, 0xB0	; 176
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_vidwriteString>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <main+0x3e2>
						break;
					case '-':
						LCD_vidshiftLeftCursor();
    2abc:	0e 94 ab 09 	call	0x1356	; 0x1356 <LCD_vidshiftLeftCursor>
						LCD_vidwriteCharacter(' ');
    2ac0:	80 e2       	ldi	r24, 0x20	; 32
    2ac2:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_vidwriteCharacter>
						LCD_vidshiftLeftCursor();
    2ac6:	0e 94 ab 09 	call	0x1356	; 0x1356 <LCD_vidshiftLeftCursor>
						num_organize[Local_u8NumLength]='0';
    2aca:	88 a9       	ldd	r24, Y+48	; 0x30
    2acc:	28 2f       	mov	r18, r24
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	c6 96       	adiw	r24, 0x36	; 54
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	e2 0f       	add	r30, r18
    2ad8:	f3 1f       	adc	r31, r19
    2ada:	80 e3       	ldi	r24, 0x30	; 48
    2adc:	80 83       	st	Z, r24
						Local_u8NumLength--;
    2ade:	88 a9       	ldd	r24, Y+48	; 0x30
    2ae0:	81 50       	subi	r24, 0x01	; 1
    2ae2:	88 ab       	std	Y+48, r24	; 0x30
	Local_u8Keypressed = NO_KEY_PRESSED;
	while(1)
	{
		LCD_vidwriteString("Enter Num:");
		/*Enter the decimal number*/
		while(Local_u8Keypressed!='=')
    2ae4:	8d a9       	ldd	r24, Y+53	; 0x35
    2ae6:	8d 33       	cpi	r24, 0x3D	; 61
    2ae8:	09 f0       	breq	.+2      	; 0x2aec <main+0x3ea>
    2aea:	a2 cf       	rjmp	.-188    	; 0x2a30 <main+0x32e>
						break;
					}
				}
			}
		}
		for(u8 Local_u8DigitCounter = 0 ; Local_u8DigitCounter<Local_u8NumLength ; Local_u8DigitCounter++)
    2aec:	1b a6       	std	Y+43, r1	; 0x2b
    2aee:	42 c0       	rjmp	.+132    	; 0x2b74 <main+0x472>
		{
			Local_u32Num += num_organize[Local_u8NumLength-Local_u8DigitCounter-1]*iteration;
    2af0:	88 a9       	ldd	r24, Y+48	; 0x30
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	a9 01       	movw	r20, r18
    2afe:	48 1b       	sub	r20, r24
    2b00:	59 0b       	sbc	r21, r25
    2b02:	ca 01       	movw	r24, r20
    2b04:	9c 01       	movw	r18, r24
    2b06:	21 50       	subi	r18, 0x01	; 1
    2b08:	30 40       	sbci	r19, 0x00	; 0
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	c6 96       	adiw	r24, 0x36	; 54
    2b0e:	fc 01       	movw	r30, r24
    2b10:	e2 0f       	add	r30, r18
    2b12:	f3 1f       	adc	r31, r19
    2b14:	80 81       	ld	r24, Z
    2b16:	88 2f       	mov	r24, r24
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	a0 e0       	ldi	r26, 0x00	; 0
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	2c a5       	ldd	r18, Y+44	; 0x2c
    2b20:	3d a5       	ldd	r19, Y+45	; 0x2d
    2b22:	4e a5       	ldd	r20, Y+46	; 0x2e
    2b24:	5f a5       	ldd	r21, Y+47	; 0x2f
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__mulsi3>
    2b2e:	9b 01       	movw	r18, r22
    2b30:	ac 01       	movw	r20, r24
    2b32:	89 a9       	ldd	r24, Y+49	; 0x31
    2b34:	9a a9       	ldd	r25, Y+50	; 0x32
    2b36:	ab a9       	ldd	r26, Y+51	; 0x33
    2b38:	bc a9       	ldd	r27, Y+52	; 0x34
    2b3a:	82 0f       	add	r24, r18
    2b3c:	93 1f       	adc	r25, r19
    2b3e:	a4 1f       	adc	r26, r20
    2b40:	b5 1f       	adc	r27, r21
    2b42:	89 ab       	std	Y+49, r24	; 0x31
    2b44:	9a ab       	std	Y+50, r25	; 0x32
    2b46:	ab ab       	std	Y+51, r26	; 0x33
    2b48:	bc ab       	std	Y+52, r27	; 0x34
			iteration*=10;
    2b4a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b4c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b4e:	ae a5       	ldd	r26, Y+46	; 0x2e
    2b50:	bf a5       	ldd	r27, Y+47	; 0x2f
    2b52:	2a e0       	ldi	r18, 0x0A	; 10
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__mulsi3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	8c a7       	std	Y+44, r24	; 0x2c
    2b68:	9d a7       	std	Y+45, r25	; 0x2d
    2b6a:	ae a7       	std	Y+46, r26	; 0x2e
    2b6c:	bf a7       	std	Y+47, r27	; 0x2f
						break;
					}
				}
			}
		}
		for(u8 Local_u8DigitCounter = 0 ; Local_u8DigitCounter<Local_u8NumLength ; Local_u8DigitCounter++)
    2b6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b70:	8f 5f       	subi	r24, 0xFF	; 255
    2b72:	8b a7       	std	Y+43, r24	; 0x2b
    2b74:	9b a5       	ldd	r25, Y+43	; 0x2b
    2b76:	88 a9       	ldd	r24, Y+48	; 0x30
    2b78:	98 17       	cp	r25, r24
    2b7a:	08 f4       	brcc	.+2      	; 0x2b7e <main+0x47c>
    2b7c:	b9 cf       	rjmp	.-142    	; 0x2af0 <main+0x3ee>
		{
			Local_u32Num += num_organize[Local_u8NumLength-Local_u8DigitCounter-1]*iteration;
			iteration*=10;
		}
		iteration=1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	a0 e0       	ldi	r26, 0x00	; 0
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	8c a7       	std	Y+44, r24	; 0x2c
    2b88:	9d a7       	std	Y+45, r25	; 0x2d
    2b8a:	ae a7       	std	Y+46, r26	; 0x2e
    2b8c:	bf a7       	std	Y+47, r27	; 0x2f
		Local_u8NumLength=0;
    2b8e:	18 aa       	std	Y+48, r1	; 0x30
		if(Local_u8Keypressed =='=')
    2b90:	8d a9       	ldd	r24, Y+53	; 0x35
    2b92:	8d 33       	cpi	r24, 0x3D	; 61
    2b94:	71 f4       	brne	.+28     	; 0x2bb2 <main+0x4b0>
		{
			LCD_vidbeginAtSecondLine();
    2b96:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_vidbeginAtSecondLine>
			LCD_viddecimalToBinary(Local_u32Num);
    2b9a:	89 a9       	ldd	r24, Y+49	; 0x31
    2b9c:	9a a9       	ldd	r25, Y+50	; 0x32
    2b9e:	ab a9       	ldd	r26, Y+51	; 0x33
    2ba0:	bc a9       	ldd	r27, Y+52	; 0x34
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 87 0b 	call	0x170e	; 0x170e <LCD_viddecimalToBinary>
			Local_u32Num=0;
    2baa:	19 aa       	std	Y+49, r1	; 0x31
    2bac:	1a aa       	std	Y+50, r1	; 0x32
    2bae:	1b aa       	std	Y+51, r1	; 0x33
    2bb0:	1c aa       	std	Y+52, r1	; 0x34
		}
		Local_u8Keypressed=NO_KEY_PRESSED;
    2bb2:	8f ef       	ldi	r24, 0xFF	; 255
    2bb4:	8d ab       	std	Y+53, r24	; 0x35
    2bb6:	37 cf       	rjmp	.-402    	; 0x2a26 <main+0x324>

00002bb8 <__mulsi3>:
    2bb8:	62 9f       	mul	r22, r18
    2bba:	d0 01       	movw	r26, r0
    2bbc:	73 9f       	mul	r23, r19
    2bbe:	f0 01       	movw	r30, r0
    2bc0:	82 9f       	mul	r24, r18
    2bc2:	e0 0d       	add	r30, r0
    2bc4:	f1 1d       	adc	r31, r1
    2bc6:	64 9f       	mul	r22, r20
    2bc8:	e0 0d       	add	r30, r0
    2bca:	f1 1d       	adc	r31, r1
    2bcc:	92 9f       	mul	r25, r18
    2bce:	f0 0d       	add	r31, r0
    2bd0:	83 9f       	mul	r24, r19
    2bd2:	f0 0d       	add	r31, r0
    2bd4:	74 9f       	mul	r23, r20
    2bd6:	f0 0d       	add	r31, r0
    2bd8:	65 9f       	mul	r22, r21
    2bda:	f0 0d       	add	r31, r0
    2bdc:	99 27       	eor	r25, r25
    2bde:	72 9f       	mul	r23, r18
    2be0:	b0 0d       	add	r27, r0
    2be2:	e1 1d       	adc	r30, r1
    2be4:	f9 1f       	adc	r31, r25
    2be6:	63 9f       	mul	r22, r19
    2be8:	b0 0d       	add	r27, r0
    2bea:	e1 1d       	adc	r30, r1
    2bec:	f9 1f       	adc	r31, r25
    2bee:	bd 01       	movw	r22, r26
    2bf0:	cf 01       	movw	r24, r30
    2bf2:	11 24       	eor	r1, r1
    2bf4:	08 95       	ret

00002bf6 <__divmodsi4>:
    2bf6:	97 fb       	bst	r25, 7
    2bf8:	09 2e       	mov	r0, r25
    2bfa:	05 26       	eor	r0, r21
    2bfc:	0e d0       	rcall	.+28     	; 0x2c1a <__divmodsi4_neg1>
    2bfe:	57 fd       	sbrc	r21, 7
    2c00:	04 d0       	rcall	.+8      	; 0x2c0a <__divmodsi4_neg2>
    2c02:	14 d0       	rcall	.+40     	; 0x2c2c <__udivmodsi4>
    2c04:	0a d0       	rcall	.+20     	; 0x2c1a <__divmodsi4_neg1>
    2c06:	00 1c       	adc	r0, r0
    2c08:	38 f4       	brcc	.+14     	; 0x2c18 <__divmodsi4_exit>

00002c0a <__divmodsi4_neg2>:
    2c0a:	50 95       	com	r21
    2c0c:	40 95       	com	r20
    2c0e:	30 95       	com	r19
    2c10:	21 95       	neg	r18
    2c12:	3f 4f       	sbci	r19, 0xFF	; 255
    2c14:	4f 4f       	sbci	r20, 0xFF	; 255
    2c16:	5f 4f       	sbci	r21, 0xFF	; 255

00002c18 <__divmodsi4_exit>:
    2c18:	08 95       	ret

00002c1a <__divmodsi4_neg1>:
    2c1a:	f6 f7       	brtc	.-4      	; 0x2c18 <__divmodsi4_exit>
    2c1c:	90 95       	com	r25
    2c1e:	80 95       	com	r24
    2c20:	70 95       	com	r23
    2c22:	61 95       	neg	r22
    2c24:	7f 4f       	sbci	r23, 0xFF	; 255
    2c26:	8f 4f       	sbci	r24, 0xFF	; 255
    2c28:	9f 4f       	sbci	r25, 0xFF	; 255
    2c2a:	08 95       	ret

00002c2c <__udivmodsi4>:
    2c2c:	a1 e2       	ldi	r26, 0x21	; 33
    2c2e:	1a 2e       	mov	r1, r26
    2c30:	aa 1b       	sub	r26, r26
    2c32:	bb 1b       	sub	r27, r27
    2c34:	fd 01       	movw	r30, r26
    2c36:	0d c0       	rjmp	.+26     	; 0x2c52 <__udivmodsi4_ep>

00002c38 <__udivmodsi4_loop>:
    2c38:	aa 1f       	adc	r26, r26
    2c3a:	bb 1f       	adc	r27, r27
    2c3c:	ee 1f       	adc	r30, r30
    2c3e:	ff 1f       	adc	r31, r31
    2c40:	a2 17       	cp	r26, r18
    2c42:	b3 07       	cpc	r27, r19
    2c44:	e4 07       	cpc	r30, r20
    2c46:	f5 07       	cpc	r31, r21
    2c48:	20 f0       	brcs	.+8      	; 0x2c52 <__udivmodsi4_ep>
    2c4a:	a2 1b       	sub	r26, r18
    2c4c:	b3 0b       	sbc	r27, r19
    2c4e:	e4 0b       	sbc	r30, r20
    2c50:	f5 0b       	sbc	r31, r21

00002c52 <__udivmodsi4_ep>:
    2c52:	66 1f       	adc	r22, r22
    2c54:	77 1f       	adc	r23, r23
    2c56:	88 1f       	adc	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	1a 94       	dec	r1
    2c5c:	69 f7       	brne	.-38     	; 0x2c38 <__udivmodsi4_loop>
    2c5e:	60 95       	com	r22
    2c60:	70 95       	com	r23
    2c62:	80 95       	com	r24
    2c64:	90 95       	com	r25
    2c66:	9b 01       	movw	r18, r22
    2c68:	ac 01       	movw	r20, r24
    2c6a:	bd 01       	movw	r22, r26
    2c6c:	cf 01       	movw	r24, r30
    2c6e:	08 95       	ret

00002c70 <__prologue_saves__>:
    2c70:	2f 92       	push	r2
    2c72:	3f 92       	push	r3
    2c74:	4f 92       	push	r4
    2c76:	5f 92       	push	r5
    2c78:	6f 92       	push	r6
    2c7a:	7f 92       	push	r7
    2c7c:	8f 92       	push	r8
    2c7e:	9f 92       	push	r9
    2c80:	af 92       	push	r10
    2c82:	bf 92       	push	r11
    2c84:	cf 92       	push	r12
    2c86:	df 92       	push	r13
    2c88:	ef 92       	push	r14
    2c8a:	ff 92       	push	r15
    2c8c:	0f 93       	push	r16
    2c8e:	1f 93       	push	r17
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	ca 1b       	sub	r28, r26
    2c9a:	db 0b       	sbc	r29, r27
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	09 94       	ijmp

00002ca8 <__epilogue_restores__>:
    2ca8:	2a 88       	ldd	r2, Y+18	; 0x12
    2caa:	39 88       	ldd	r3, Y+17	; 0x11
    2cac:	48 88       	ldd	r4, Y+16	; 0x10
    2cae:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cba:	b9 84       	ldd	r11, Y+9	; 0x09
    2cbc:	c8 84       	ldd	r12, Y+8	; 0x08
    2cbe:	df 80       	ldd	r13, Y+7	; 0x07
    2cc0:	ee 80       	ldd	r14, Y+6	; 0x06
    2cc2:	fd 80       	ldd	r15, Y+5	; 0x05
    2cc4:	0c 81       	ldd	r16, Y+4	; 0x04
    2cc6:	1b 81       	ldd	r17, Y+3	; 0x03
    2cc8:	aa 81       	ldd	r26, Y+2	; 0x02
    2cca:	b9 81       	ldd	r27, Y+1	; 0x01
    2ccc:	ce 0f       	add	r28, r30
    2cce:	d1 1d       	adc	r29, r1
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	cd bf       	out	0x3d, r28	; 61
    2cda:	ed 01       	movw	r28, r26
    2cdc:	08 95       	ret

00002cde <_exit>:
    2cde:	f8 94       	cli

00002ce0 <__stop_program>:
    2ce0:	ff cf       	rjmp	.-2      	; 0x2ce0 <__stop_program>
